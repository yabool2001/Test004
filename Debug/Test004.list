
Test004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c8c  08002c8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08002d04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002d04  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bef4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b7  00000000  00000000  0002bf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002d948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162d0  00000000  00000000  0002e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b22  00000000  00000000  00044b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e8f  00000000  00000000  0004e6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002274  00000000  00000000  000d7594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002b90 	.word	0x08002b90

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08002b90 	.word	0x08002b90

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	1c08      	adds	r0, r1, #0
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 f9f8 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f80d 	bl	800046e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f888 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000458:	f000 f852 	bl	8000500 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      printf ( "B" ) ;
 800045c:	2042      	movs	r0, #66	; 0x42
 800045e:	f001 fea5 	bl	80021ac <putchar>
      HAL_Delay ( 1000 ) ;
 8000462:	23fa      	movs	r3, #250	; 0xfa
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fa70 	bl	800094c <HAL_Delay>
      printf ( "B" ) ;
 800046c:	e7f6      	b.n	800045c <main+0x14>

0800046e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046e:	b590      	push	{r4, r7, lr}
 8000470:	b093      	sub	sp, #76	; 0x4c
 8000472:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000474:	2410      	movs	r4, #16
 8000476:	193b      	adds	r3, r7, r4
 8000478:	0018      	movs	r0, r3
 800047a:	2338      	movs	r3, #56	; 0x38
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f001 fe8c 	bl	800219c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	003b      	movs	r3, r7
 8000486:	0018      	movs	r0, r3
 8000488:	2310      	movs	r3, #16
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f001 fe85 	bl	800219c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fc94 	bl	8000dc4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2202      	movs	r2, #2
 80004a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2240      	movs	r2, #64	; 0x40
 80004b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fccc 	bl	8000e5c <HAL_RCC_OscConfig>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004c8:	f000 f864 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	003b      	movs	r3, r7
 80004ce:	2207      	movs	r2, #7
 80004d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e4:	003b      	movs	r3, r7
 80004e6:	2100      	movs	r1, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 ffd7 	bl	800149c <HAL_RCC_ClockConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004f2:	f000 f84f 	bl	8000594 <Error_Handler>
  }
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b013      	add	sp, #76	; 0x4c
 80004fc:	bd90      	pop	{r4, r7, pc}
	...

08000500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_USART2_UART_Init+0x60>)
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_USART2_UART_Init+0x60>)
 800050c:	2296      	movs	r2, #150	; 0x96
 800050e:	0192      	lsls	r2, r2, #6
 8000510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_USART2_UART_Init+0x60>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_USART2_UART_Init+0x60>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_USART2_UART_Init+0x60>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_USART2_UART_Init+0x60>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_USART2_UART_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_USART2_UART_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_USART2_UART_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_USART2_UART_Init+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_USART2_UART_Init+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MX_USART2_UART_Init+0x60>)
 800054a:	0018      	movs	r0, r3
 800054c:	f001 f950 	bl	80017f0 <HAL_UART_Init>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000554:	f000 f81e 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000098 	.word	0x20000098
 8000564:	40004400 	.word	0x40004400

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_GPIO_Init+0x28>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <MX_GPIO_Init+0x28>)
 8000574:	2101      	movs	r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MX_GPIO_Init+0x28>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2201      	movs	r2, #1
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x44>)
 80005a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <HAL_MspInit+0x44>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	641a      	str	r2, [r3, #64]	; 0x40
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x44>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_MspInit+0x44>)
 80005c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_MspInit+0x44>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0549      	lsls	r1, r1, #21
 80005c8:	430a      	orrs	r2, r1
 80005ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_MspInit+0x44>)
 80005ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	055b      	lsls	r3, r3, #21
 80005d4:	4013      	ands	r3, r2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b08b      	sub	sp, #44	; 0x2c
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2414      	movs	r4, #20
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	2314      	movs	r3, #20
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f001 fdce 	bl	800219c <memset>
  if(huart->Instance==USART2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <HAL_UART_MspInit+0x8c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d130      	bne.n	800066c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_UART_MspInit+0x90>)
 800060c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0289      	lsls	r1, r1, #10
 8000614:	430a      	orrs	r2, r1
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_UART_MspInit+0x90>)
 800061a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	029b      	lsls	r3, r3, #10
 8000620:	4013      	ands	r3, r2
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <HAL_UART_MspInit+0x90>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800063e:	0021      	movs	r1, r4
 8000640:	187b      	adds	r3, r7, r1
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2201      	movs	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	187a      	adds	r2, r7, r1
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fa48 	bl	8000afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b00b      	add	sp, #44	; 0x2c
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	40004400 	.word	0x40004400
 8000678:	40021000 	.word	0x40021000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f938 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e00a      	b.n	80006d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006bc:	e000      	b.n	80006c0 <_read+0x16>
 80006be:	bf00      	nop
 80006c0:	0001      	movs	r1, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	60ba      	str	r2, [r7, #8]
 80006c8:	b2ca      	uxtb	r2, r1
 80006ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	3301      	adds	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dbf0      	blt.n	80006bc <_read+0x12>
	}

return len;
 80006da:	687b      	ldr	r3, [r7, #4]
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b006      	add	sp, #24
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	e009      	b.n	800070a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	60ba      	str	r2, [r7, #8]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	0018      	movs	r0, r3
 8000700:	e000      	b.n	8000704 <_write+0x20>
 8000702:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	3301      	adds	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	429a      	cmp	r2, r3
 8000710:	dbf1      	blt.n	80006f6 <_write+0x12>
	}
	return len;
 8000712:	687b      	ldr	r3, [r7, #4]
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	b006      	add	sp, #24
 800071a:	bd80      	pop	{r7, pc}

0800071c <_close>:

int _close(int file)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	return -1;
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
}
 8000728:	0018      	movs	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	b002      	add	sp, #8
 800072e:	bd80      	pop	{r7, pc}

08000730 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0192      	lsls	r2, r2, #6
 8000740:	605a      	str	r2, [r3, #4]
	return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b002      	add	sp, #8
 800074a:	bd80      	pop	{r7, pc}

0800074c <_isatty>:

int _isatty(int file)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	return 1;
 8000754:	2301      	movs	r3, #1
}
 8000756:	0018      	movs	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}

0800075e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b084      	sub	sp, #16
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
	return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b004      	add	sp, #16
 8000772:	bd80      	pop	{r7, pc}

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <_sbrk+0x5c>)
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <_sbrk+0x60>)
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <_sbrk+0x64>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <_sbrk+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d207      	bcs.n	80007b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a4:	f001 fcd0 	bl	8002148 <__errno>
 80007a8:	0003      	movs	r3, r0
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	425b      	negs	r3, r3
 80007b2:	e009      	b.n	80007c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	18d2      	adds	r2, r2, r3
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <_sbrk+0x64>)
 80007c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b006      	add	sp, #24
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20002000 	.word	0x20002000
 80007d4:	00000400 	.word	0x00000400
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	20000140 	.word	0x20000140

080007e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f0:	f7ff fff6 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	; (800082c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LoopForever+0xe>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	; (8000838 <LoopForever+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081a:	f001 fc9b 	bl	8002154 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800081e:	f7ff fe13 	bl	8000448 <main>

08000822 <LoopForever>:

LoopForever:
  b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   r0, =_estack
 8000824:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000830:	08002c94 	.word	0x08002c94
  ldr r2, =_sbss
 8000834:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000838:	2000013c 	.word	0x2000013c

0800083c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC1_IRQHandler>
	...

08000840 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_Init+0x3c>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_Init+0x3c>)
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	0049      	lsls	r1, r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800085a:	2003      	movs	r0, #3
 800085c:	f000 f810 	bl	8000880 <HAL_InitTick>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d003      	beq.n	800086c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e001      	b.n	8000870 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff fe98 	bl	80005a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
}
 8000874:	0018      	movs	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000888:	230f      	movs	r3, #15
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_InitTick+0x88>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d02b      	beq.n	80008f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_InitTick+0x8c>)
 800089a:	681c      	ldr	r4, [r3, #0]
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <HAL_InitTick+0x88>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	0019      	movs	r1, r3
 80008a2:	23fa      	movs	r3, #250	; 0xfa
 80008a4:	0098      	lsls	r0, r3, #2
 80008a6:	f7ff fc2d 	bl	8000104 <__udivsi3>
 80008aa:	0003      	movs	r3, r0
 80008ac:	0019      	movs	r1, r3
 80008ae:	0020      	movs	r0, r4
 80008b0:	f7ff fc28 	bl	8000104 <__udivsi3>
 80008b4:	0003      	movs	r3, r0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 f913 	bl	8000ae2 <HAL_SYSTICK_Config>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d112      	bne.n	80008e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d80a      	bhi.n	80008dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	2301      	movs	r3, #1
 80008ca:	425b      	negs	r3, r3
 80008cc:	2200      	movs	r2, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f8f2 	bl	8000ab8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_InitTick+0x90>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	e00d      	b.n	80008f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e008      	b.n	80008f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e6:	230f      	movs	r3, #15
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e003      	b.n	80008f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f0:	230f      	movs	r3, #15
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008f8:	230f      	movs	r3, #15
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	781b      	ldrb	r3, [r3, #0]
}
 80008fe:	0018      	movs	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	b005      	add	sp, #20
 8000904:	bd90      	pop	{r4, r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000008 	.word	0x20000008
 800090c:	20000000 	.word	0x20000000
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	001a      	movs	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	18d2      	adds	r2, r2, r3
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HAL_IncTick+0x20>)
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	20000008 	.word	0x20000008
 8000934:	20000128 	.word	0x20000128

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000128 	.word	0x20000128

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fff0 	bl	8000938 <HAL_GetTick>
 8000958:	0003      	movs	r3, r0
 800095a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3301      	adds	r3, #1
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	001a      	movs	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	189b      	adds	r3, r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	f7ff ffe0 	bl	8000938 <HAL_GetTick>
 8000978:	0002      	movs	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b7f      	cmp	r3, #127	; 0x7f
 80009a8:	d828      	bhi.n	80009fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009aa:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	33c0      	adds	r3, #192	; 0xc0
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	589b      	ldr	r3, [r3, r2]
 80009ba:	1dfa      	adds	r2, r7, #7
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	0011      	movs	r1, r2
 80009c0:	2203      	movs	r2, #3
 80009c2:	400a      	ands	r2, r1
 80009c4:	00d2      	lsls	r2, r2, #3
 80009c6:	21ff      	movs	r1, #255	; 0xff
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	401a      	ands	r2, r3
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	2303      	movs	r3, #3
 80009e2:	4003      	ands	r3, r0
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	481f      	ldr	r0, [pc, #124]	; (8000a68 <__NVIC_SetPriority+0xd4>)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	430a      	orrs	r2, r1
 80009f4:	33c0      	adds	r3, #192	; 0xc0
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009fa:	e031      	b.n	8000a60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <__NVIC_SetPriority+0xd8>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	0019      	movs	r1, r3
 8000a04:	230f      	movs	r3, #15
 8000a06:	400b      	ands	r3, r1
 8000a08:	3b08      	subs	r3, #8
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3306      	adds	r3, #6
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	3304      	adds	r3, #4
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	1dfa      	adds	r2, r7, #7
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	400a      	ands	r2, r1
 8000a20:	00d2      	lsls	r2, r2, #3
 8000a22:	21ff      	movs	r1, #255	; 0xff
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	019b      	lsls	r3, r3, #6
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	401a      	ands	r2, r3
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	4003      	ands	r3, r0
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <__NVIC_SetPriority+0xd8>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	001c      	movs	r4, r3
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	4023      	ands	r3, r4
 8000a50:	3b08      	subs	r3, #8
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	430a      	orrs	r2, r1
 8000a56:	3306      	adds	r3, #6
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	18c3      	adds	r3, r0, r3
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b003      	add	sp, #12
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	045b      	lsls	r3, r3, #17
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d301      	bcc.n	8000a88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a84:	2301      	movs	r3, #1
 8000a86:	e010      	b.n	8000aaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <SysTick_Config+0x44>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	3a01      	subs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	2103      	movs	r1, #3
 8000a96:	0018      	movs	r0, r3
 8000a98:	f7ff ff7c 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x44>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	1c02      	adds	r2, r0, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff5d 	bl	8000994 <__NVIC_SetPriority>
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff ffbf 	bl	8000a70 <SysTick_Config>
 8000af2:	0003      	movs	r3, r0
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e147      	b.n	8000d9c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d100      	bne.n	8000b24 <HAL_GPIO_Init+0x28>
 8000b22:	e138      	b.n	8000d96 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2203      	movs	r2, #3
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d005      	beq.n	8000b3c <HAL_GPIO_Init+0x40>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d130      	bne.n	8000b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	43da      	mvns	r2, r3
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	0013      	movs	r3, r2
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b72:	2201      	movs	r2, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	2201      	movs	r2, #1
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d017      	beq.n	8000bda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2203      	movs	r2, #3
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d123      	bne.n	8000c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	08da      	lsrs	r2, r3, #3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3208      	adds	r2, #8
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	58d3      	ldr	r3, [r2, r3]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	43da      	mvns	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	2107      	movs	r1, #7
 8000c12:	400b      	ands	r3, r1
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	409a      	lsls	r2, r3
 8000c18:	0013      	movs	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	6939      	ldr	r1, [r7, #16]
 8000c2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	409a      	lsls	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	23c0      	movs	r3, #192	; 0xc0
 8000c68:	029b      	lsls	r3, r3, #10
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d100      	bne.n	8000c70 <HAL_GPIO_Init+0x174>
 8000c6e:	e092      	b.n	8000d96 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c70:	4a50      	ldr	r2, [pc, #320]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3318      	adds	r3, #24
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	589b      	ldr	r3, [r3, r2]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	220f      	movs	r2, #15
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	23a0      	movs	r3, #160	; 0xa0
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0x1ca>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a45      	ldr	r2, [pc, #276]	; (8000db8 <HAL_GPIO_Init+0x2bc>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d00d      	beq.n	8000cc2 <HAL_GPIO_Init+0x1c6>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <HAL_GPIO_Init+0x2c0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d007      	beq.n	8000cbe <HAL_GPIO_Init+0x1c2>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a43      	ldr	r2, [pc, #268]	; (8000dc0 <HAL_GPIO_Init+0x2c4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_GPIO_Init+0x1be>
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x1cc>
 8000cba:	2305      	movs	r3, #5
 8000cbc:	e004      	b.n	8000cc8 <HAL_GPIO_Init+0x1cc>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_Init+0x1cc>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x1cc>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	2103      	movs	r1, #3
 8000ccc:	400a      	ands	r2, r1
 8000cce:	00d2      	lsls	r2, r2, #3
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000cd8:	4936      	ldr	r1, [pc, #216]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3318      	adds	r3, #24
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ce6:	4a33      	ldr	r2, [pc, #204]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	58d3      	ldr	r3, [r2, r3]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	4013      	ands	r3, r2
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d0c:	4929      	ldr	r1, [pc, #164]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d16:	2384      	movs	r3, #132	; 0x84
 8000d18:	58d3      	ldr	r3, [r2, r3]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	029b      	lsls	r3, r3, #10
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d3a:	491e      	ldr	r1, [pc, #120]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d3c:	2284      	movs	r2, #132	; 0x84
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	035b      	lsls	r3, r3, #13
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43da      	mvns	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	039b      	lsls	r3, r3, #14
 8000d84:	4013      	ands	r3, r2
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_GPIO_Init+0x2b8>)
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	40da      	lsrs	r2, r3
 8000da4:	1e13      	subs	r3, r2, #0
 8000da6:	d000      	beq.n	8000daa <HAL_GPIO_Init+0x2ae>
 8000da8:	e6b0      	b.n	8000b0c <HAL_GPIO_Init+0x10>
  }
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b006      	add	sp, #24
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021800 	.word	0x40021800
 8000db8:	50000400 	.word	0x50000400
 8000dbc:	50000800 	.word	0x50000800
 8000dc0:	50000c00 	.word	0x50000c00

08000dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d11f      	bne.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	0013      	movs	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	189b      	adds	r3, r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4912      	ldr	r1, [pc, #72]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff f984 	bl	8000104 <__udivsi3>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e02:	e008      	b.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e001      	b.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e009      	b.n	8000e2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e18:	695a      	ldr	r2, [r3, #20]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d0ed      	beq.n	8000e04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b004      	add	sp, #16
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40007000 	.word	0x40007000
 8000e38:	fffff9ff 	.word	0xfffff9ff
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	000f4240 	.word	0x000f4240

08000e44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	23e0      	movs	r3, #224	; 0xe0
 8000e4e:	01db      	lsls	r3, r3, #7
 8000e50:	4013      	ands	r3, r2
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e304      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2201      	movs	r2, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	d100      	bne.n	8000e7a <HAL_RCC_OscConfig+0x1e>
 8000e78:	e07c      	b.n	8000f74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e7a:	4bc3      	ldr	r3, [pc, #780]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2238      	movs	r2, #56	; 0x38
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e84:	4bc0      	ldr	r3, [pc, #768]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d102      	bne.n	8000e9a <HAL_RCC_OscConfig+0x3e>
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d002      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d10b      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea0:	4bb9      	ldr	r3, [pc, #740]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	029b      	lsls	r3, r3, #10
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d062      	beq.n	8000f72 <HAL_RCC_OscConfig+0x116>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d15e      	bne.n	8000f72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e2df      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d107      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x78>
 8000ec4:	4bb0      	ldr	r3, [pc, #704]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4baf      	ldr	r3, [pc, #700]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e020      	b.n	8000f16 <HAL_RCC_OscConfig+0xba>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	02db      	lsls	r3, r3, #11
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d10e      	bne.n	8000efe <HAL_RCC_OscConfig+0xa2>
 8000ee0:	4ba9      	ldr	r3, [pc, #676]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4ba8      	ldr	r3, [pc, #672]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	02c9      	lsls	r1, r1, #11
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	4ba6      	ldr	r3, [pc, #664]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4ba5      	ldr	r3, [pc, #660]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	0249      	lsls	r1, r1, #9
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e00b      	b.n	8000f16 <HAL_RCC_OscConfig+0xba>
 8000efe:	4ba2      	ldr	r3, [pc, #648]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4ba1      	ldr	r3, [pc, #644]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f04:	49a1      	ldr	r1, [pc, #644]	; (800118c <HAL_RCC_OscConfig+0x330>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	4b9f      	ldr	r3, [pc, #636]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b9e      	ldr	r3, [pc, #632]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f10:	499f      	ldr	r1, [pc, #636]	; (8001190 <HAL_RCC_OscConfig+0x334>)
 8000f12:	400a      	ands	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d014      	beq.n	8000f48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1e:	f7ff fd0b 	bl	8000938 <HAL_GetTick>
 8000f22:	0003      	movs	r3, r0
 8000f24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fd06 	bl	8000938 <HAL_GetTick>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e29e      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3a:	4b93      	ldr	r3, [pc, #588]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d0f0      	beq.n	8000f28 <HAL_RCC_OscConfig+0xcc>
 8000f46:	e015      	b.n	8000f74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fcf6 	bl	8000938 <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f52:	f7ff fcf1 	bl	8000938 <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b64      	cmp	r3, #100	; 0x64
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e289      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f64:	4b88      	ldr	r3, [pc, #544]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	029b      	lsls	r3, r3, #10
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d1f0      	bne.n	8000f52 <HAL_RCC_OscConfig+0xf6>
 8000f70:	e000      	b.n	8000f74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d100      	bne.n	8000f80 <HAL_RCC_OscConfig+0x124>
 8000f7e:	e099      	b.n	80010b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f80:	4b81      	ldr	r3, [pc, #516]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2238      	movs	r2, #56	; 0x38
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4013      	ands	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d102      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x144>
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d002      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d135      	bne.n	8001012 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa6:	4b78      	ldr	r3, [pc, #480]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d005      	beq.n	8000fbe <HAL_RCC_OscConfig+0x162>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e25c      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4b72      	ldr	r3, [pc, #456]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a74      	ldr	r2, [pc, #464]	; (8001194 <HAL_RCC_OscConfig+0x338>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	021a      	lsls	r2, r3, #8
 8000fce:	4b6e      	ldr	r3, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d112      	bne.n	8001000 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fda:	4b6b      	ldr	r3, [pc, #428]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6e      	ldr	r2, [pc, #440]	; (8001198 <HAL_RCC_OscConfig+0x33c>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	4b67      	ldr	r3, [pc, #412]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fee:	4b66      	ldr	r3, [pc, #408]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	0adb      	lsrs	r3, r3, #11
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	4a68      	ldr	r2, [pc, #416]	; (800119c <HAL_RCC_OscConfig+0x340>)
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x344>)
 8000ffe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001000:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x348>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fc3b 	bl	8000880 <HAL_InitTick>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d051      	beq.n	80010b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e232      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d030      	beq.n	800107c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a5e      	ldr	r2, [pc, #376]	; (8001198 <HAL_RCC_OscConfig+0x33c>)
 8001020:	4013      	ands	r3, r2
 8001022:	0019      	movs	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 800102a:	430a      	orrs	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800102e:	4b56      	ldr	r3, [pc, #344]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b55      	ldr	r3, [pc, #340]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0049      	lsls	r1, r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103c:	f7ff fc7c 	bl	8000938 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fc77 	bl	8000938 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e20f      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001058:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4013      	ands	r3, r2
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b48      	ldr	r3, [pc, #288]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a4a      	ldr	r2, [pc, #296]	; (8001194 <HAL_RCC_OscConfig+0x338>)
 800106a:	4013      	ands	r3, r2
 800106c:	0019      	movs	r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	021a      	lsls	r2, r3, #8
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001076:	430a      	orrs	r2, r1
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	e01b      	b.n	80010b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800107c:	4b42      	ldr	r3, [pc, #264]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001082:	4949      	ldr	r1, [pc, #292]	; (80011a8 <HAL_RCC_OscConfig+0x34c>)
 8001084:	400a      	ands	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001088:	f7ff fc56 	bl	8000938 <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001092:	f7ff fc51 	bl	8000938 <HAL_GetTick>
 8001096:	0002      	movs	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e1e9      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a4:	4b38      	ldr	r3, [pc, #224]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4013      	ands	r3, r2
 80010ae:	d1f0      	bne.n	8001092 <HAL_RCC_OscConfig+0x236>
 80010b0:	e000      	b.n	80010b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2208      	movs	r2, #8
 80010ba:	4013      	ands	r3, r2
 80010bc:	d047      	beq.n	800114e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2238      	movs	r2, #56	; 0x38
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b18      	cmp	r3, #24
 80010c8:	d10a      	bne.n	80010e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d03c      	beq.n	800114e <HAL_RCC_OscConfig+0x2f2>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d138      	bne.n	800114e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e1cb      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d019      	beq.n	800111c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 80010ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	430a      	orrs	r2, r1
 80010f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc20 	bl	8000938 <HAL_GetTick>
 80010f8:	0003      	movs	r3, r0
 80010fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010fe:	f7ff fc1b 	bl	8000938 <HAL_GetTick>
 8001102:	0002      	movs	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e1b3      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001114:	2202      	movs	r2, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d0f1      	beq.n	80010fe <HAL_RCC_OscConfig+0x2a2>
 800111a:	e018      	b.n	800114e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 800111e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001122:	2101      	movs	r1, #1
 8001124:	438a      	bics	r2, r1
 8001126:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fc06 	bl	8000938 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001132:	f7ff fc01 	bl	8000938 <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e199      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001148:	2202      	movs	r2, #2
 800114a:	4013      	ands	r3, r2
 800114c:	d1f1      	bne.n	8001132 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2204      	movs	r2, #4
 8001154:	4013      	ands	r3, r2
 8001156:	d100      	bne.n	800115a <HAL_RCC_OscConfig+0x2fe>
 8001158:	e0c6      	b.n	80012e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	231f      	movs	r3, #31
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2238      	movs	r2, #56	; 0x38
 8001168:	4013      	ands	r3, r2
 800116a:	2b20      	cmp	r3, #32
 800116c:	d11e      	bne.n	80011ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8001170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001172:	2202      	movs	r2, #2
 8001174:	4013      	ands	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x31e>
 8001178:	e0b6      	b.n	80012e8 <HAL_RCC_OscConfig+0x48c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d000      	beq.n	8001184 <HAL_RCC_OscConfig+0x328>
 8001182:	e0b1      	b.n	80012e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e177      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
 8001188:	40021000 	.word	0x40021000
 800118c:	fffeffff 	.word	0xfffeffff
 8001190:	fffbffff 	.word	0xfffbffff
 8001194:	ffff80ff 	.word	0xffff80ff
 8001198:	ffffc7ff 	.word	0xffffc7ff
 800119c:	00f42400 	.word	0x00f42400
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000004 	.word	0x20000004
 80011a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011ac:	4bb4      	ldr	r3, [pc, #720]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80011ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	055b      	lsls	r3, r3, #21
 80011b4:	4013      	ands	r3, r2
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_OscConfig+0x360>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_RCC_OscConfig+0x362>
 80011bc:	2300      	movs	r3, #0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d011      	beq.n	80011e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4baf      	ldr	r3, [pc, #700]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80011c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c6:	4bae      	ldr	r3, [pc, #696]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	0549      	lsls	r1, r1, #21
 80011cc:	430a      	orrs	r2, r1
 80011ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80011d0:	4bab      	ldr	r3, [pc, #684]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80011d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	055b      	lsls	r3, r3, #21
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011de:	231f      	movs	r3, #31
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e6:	4ba7      	ldr	r3, [pc, #668]	; (8001484 <HAL_RCC_OscConfig+0x628>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	d11a      	bne.n	8001228 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011f2:	4ba4      	ldr	r3, [pc, #656]	; (8001484 <HAL_RCC_OscConfig+0x628>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4ba3      	ldr	r3, [pc, #652]	; (8001484 <HAL_RCC_OscConfig+0x628>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0049      	lsls	r1, r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001200:	f7ff fb9a 	bl	8000938 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff fb95 	bl	8000938 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e12d      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121c:	4b99      	ldr	r3, [pc, #612]	; (8001484 <HAL_RCC_OscConfig+0x628>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4013      	ands	r3, r2
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x3e2>
 8001230:	4b93      	ldr	r3, [pc, #588]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	65da      	str	r2, [r3, #92]	; 0x5c
 800123c:	e01c      	b.n	8001278 <HAL_RCC_OscConfig+0x41c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b05      	cmp	r3, #5
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x404>
 8001246:	4b8e      	ldr	r3, [pc, #568]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800124a:	4b8d      	ldr	r3, [pc, #564]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 800124c:	2104      	movs	r1, #4
 800124e:	430a      	orrs	r2, r1
 8001250:	65da      	str	r2, [r3, #92]	; 0x5c
 8001252:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001256:	4b8a      	ldr	r3, [pc, #552]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001258:	2101      	movs	r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	65da      	str	r2, [r3, #92]	; 0x5c
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0x41c>
 8001260:	4b87      	ldr	r3, [pc, #540]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001264:	4b86      	ldr	r3, [pc, #536]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001266:	2101      	movs	r1, #1
 8001268:	438a      	bics	r2, r1
 800126a:	65da      	str	r2, [r3, #92]	; 0x5c
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 800126e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001270:	4b83      	ldr	r3, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001272:	2104      	movs	r1, #4
 8001274:	438a      	bics	r2, r1
 8001276:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d014      	beq.n	80012aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fb5a 	bl	8000938 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001288:	e009      	b.n	800129e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128a:	f7ff fb55 	bl	8000938 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	4a7c      	ldr	r2, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x62c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e0ec      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x42e>
 80012a8:	e013      	b.n	80012d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb45 	bl	8000938 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b2:	e009      	b.n	80012c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b4:	f7ff fb40 	bl	8000938 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	4a72      	ldr	r2, [pc, #456]	; (8001488 <HAL_RCC_OscConfig+0x62c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e0d7      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c8:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80012ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012cc:	2202      	movs	r2, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012d2:	231f      	movs	r3, #31
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d105      	bne.n	80012e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80012de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80012e2:	496a      	ldr	r1, [pc, #424]	; (800148c <HAL_RCC_OscConfig+0x630>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x496>
 80012f0:	e0c1      	b.n	8001476 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f2:	4b63      	ldr	r3, [pc, #396]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2238      	movs	r2, #56	; 0x38
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d100      	bne.n	8001300 <HAL_RCC_OscConfig+0x4a4>
 80012fe:	e081      	b.n	8001404 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d156      	bne.n	80013b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001308:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 800130e:	4960      	ldr	r1, [pc, #384]	; (8001490 <HAL_RCC_OscConfig+0x634>)
 8001310:	400a      	ands	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fb10 	bl	8000938 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb0b 	bl	8000938 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0a3      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	049b      	lsls	r3, r3, #18
 8001338:	4013      	ands	r3, r2
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4a54      	ldr	r2, [pc, #336]	; (8001494 <HAL_RCC_OscConfig+0x638>)
 8001342:	4013      	ands	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	431a      	orrs	r2, r3
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	0449      	lsls	r1, r1, #17
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0549      	lsls	r1, r1, #21
 8001388:	430a      	orrs	r2, r1
 800138a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fad4 	bl	8000938 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff facf 	bl	8000938 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e067      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	049b      	lsls	r3, r3, #18
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x53a>
 80013b4:	e05f      	b.n	8001476 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013bc:	4934      	ldr	r1, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x634>)
 80013be:	400a      	ands	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013c8:	2103      	movs	r1, #3
 80013ca:	438a      	bics	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013d4:	4930      	ldr	r1, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x63c>)
 80013d6:	400a      	ands	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff faad 	bl	8000938 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff faa8 	bl	8000938 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e040      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	049b      	lsls	r3, r3, #18
 80013fe:	4013      	ands	r3, r2
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x588>
 8001402:	e038      	b.n	8001476 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e033      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x624>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2203      	movs	r2, #3
 800141a:	401a      	ands	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	429a      	cmp	r2, r3
 8001422:	d126      	bne.n	8001472 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2270      	movs	r2, #112	; 0x70
 8001428:	401a      	ands	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d11f      	bne.n	8001472 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	23fe      	movs	r3, #254	; 0xfe
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	401a      	ands	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d116      	bne.n	8001472 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	23f8      	movs	r3, #248	; 0xf8
 8001448:	039b      	lsls	r3, r3, #14
 800144a:	401a      	ands	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001450:	429a      	cmp	r2, r3
 8001452:	d10e      	bne.n	8001472 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	23e0      	movs	r3, #224	; 0xe0
 8001458:	051b      	lsls	r3, r3, #20
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	0f5b      	lsrs	r3, r3, #29
 8001468:	075a      	lsls	r2, r3, #29
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b008      	add	sp, #32
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40007000 	.word	0x40007000
 8001488:	00001388 	.word	0x00001388
 800148c:	efffffff 	.word	0xefffffff
 8001490:	feffffff 	.word	0xfeffffff
 8001494:	11c1808c 	.word	0x11c1808c
 8001498:	eefeffff 	.word	0xeefeffff

0800149c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0e9      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b0:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2207      	movs	r2, #7
 80014b6:	4013      	ands	r3, r2
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d91e      	bls.n	80014fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b73      	ldr	r3, [pc, #460]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2207      	movs	r2, #7
 80014c4:	4393      	bics	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	4b70      	ldr	r3, [pc, #448]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014d0:	f7ff fa32 	bl	8000938 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d8:	e009      	b.n	80014ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014da:	f7ff fa2d 	bl	8000938 <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a6a      	ldr	r2, [pc, #424]	; (8001690 <HAL_RCC_ClockConfig+0x1f4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e0ca      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2207      	movs	r2, #7
 80014f4:	4013      	ands	r3, r2
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1ee      	bne.n	80014da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2202      	movs	r2, #2
 8001502:	4013      	ands	r3, r2
 8001504:	d015      	beq.n	8001532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	d006      	beq.n	800151e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001510:	4b60      	ldr	r3, [pc, #384]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 8001516:	21e0      	movs	r1, #224	; 0xe0
 8001518:	01c9      	lsls	r1, r1, #7
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	4a5d      	ldr	r2, [pc, #372]	; (8001698 <HAL_RCC_ClockConfig+0x1fc>)
 8001524:	4013      	ands	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4013      	ands	r3, r2
 800153a:	d057      	beq.n	80015ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	029b      	lsls	r3, r3, #10
 800154c:	4013      	ands	r3, r2
 800154e:	d12b      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e097      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d107      	bne.n	800156c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155c:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	049b      	lsls	r3, r3, #18
 8001564:	4013      	ands	r3, r2
 8001566:	d11f      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e08b      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d107      	bne.n	8001584 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4013      	ands	r3, r2
 800157e:	d113      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e07f      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d106      	bne.n	800159a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e074      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e06d      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015a8:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2207      	movs	r2, #7
 80015ae:	4393      	bics	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 80015b8:	430a      	orrs	r2, r1
 80015ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015bc:	f7ff f9bc 	bl	8000938 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c4:	e009      	b.n	80015da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c6:	f7ff f9b7 	bl	8000938 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <HAL_RCC_ClockConfig+0x1f4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e054      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2238      	movs	r2, #56	; 0x38
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1ec      	bne.n	80015c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2207      	movs	r2, #7
 80015f2:	4013      	ands	r3, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d21e      	bcs.n	8001638 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2207      	movs	r2, #7
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800160c:	f7ff f994 	bl	8000938 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001614:	e009      	b.n	800162a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7ff f98f 	bl	8000938 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_RCC_ClockConfig+0x1f4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e02c      	b.n	8001684 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2207      	movs	r2, #7
 8001630:	4013      	ands	r3, r2
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2204      	movs	r2, #4
 800163e:	4013      	ands	r3, r2
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_RCC_ClockConfig+0x200>)
 8001648:	4013      	ands	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001656:	f000 f829 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 800165a:	0001      	movs	r1, r0
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_RCC_ClockConfig+0x1f8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	220f      	movs	r2, #15
 8001664:	401a      	ands	r2, r3
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_RCC_ClockConfig+0x204>)
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	58d3      	ldr	r3, [r2, r3]
 800166c:	221f      	movs	r2, #31
 800166e:	4013      	ands	r3, r2
 8001670:	000a      	movs	r2, r1
 8001672:	40da      	lsrs	r2, r3
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x208>)
 8001676:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_ClockConfig+0x20c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff f8ff 	bl	8000880 <HAL_InitTick>
 8001682:	0003      	movs	r3, r0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40022000 	.word	0x40022000
 8001690:	00001388 	.word	0x00001388
 8001694:	40021000 	.word	0x40021000
 8001698:	fffff0ff 	.word	0xfffff0ff
 800169c:	ffff8fff 	.word	0xffff8fff
 80016a0:	08002ba8 	.word	0x08002ba8
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b2:	4b3c      	ldr	r3, [pc, #240]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2238      	movs	r2, #56	; 0x38
 80016b8:	4013      	ands	r3, r2
 80016ba:	d10f      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80016bc:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0adb      	lsrs	r3, r3, #11
 80016c2:	2207      	movs	r2, #7
 80016c4:	4013      	ands	r3, r2
 80016c6:	2201      	movs	r2, #1
 80016c8:	409a      	lsls	r2, r3
 80016ca:	0013      	movs	r3, r2
 80016cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	4835      	ldr	r0, [pc, #212]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016d2:	f7fe fd17 	bl	8000104 <__udivsi3>
 80016d6:	0003      	movs	r3, r0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	e05d      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2238      	movs	r2, #56	; 0x38
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d102      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <HAL_RCC_GetSysClockFreq+0x100>)
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	e054      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2238      	movs	r2, #56	; 0x38
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d138      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2203      	movs	r2, #3
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	2207      	movs	r2, #7
 800170c:	4013      	ands	r3, r2
 800170e:	3301      	adds	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	4824      	ldr	r0, [pc, #144]	; (80017ac <HAL_RCC_GetSysClockFreq+0x100>)
 800171c:	f7fe fcf2 	bl	8000104 <__udivsi3>
 8001720:	0003      	movs	r3, r0
 8001722:	0019      	movs	r1, r3
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	227f      	movs	r2, #127	; 0x7f
 800172c:	4013      	ands	r3, r2
 800172e:	434b      	muls	r3, r1
 8001730:	617b      	str	r3, [r7, #20]
        break;
 8001732:	e00d      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	481c      	ldr	r0, [pc, #112]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001738:	f7fe fce4 	bl	8000104 <__udivsi3>
 800173c:	0003      	movs	r3, r0
 800173e:	0019      	movs	r1, r3
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	227f      	movs	r2, #127	; 0x7f
 8001748:	4013      	ands	r3, r2
 800174a:	434b      	muls	r3, r1
 800174c:	617b      	str	r3, [r7, #20]
        break;
 800174e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0f5b      	lsrs	r3, r3, #29
 8001756:	2207      	movs	r2, #7
 8001758:	4013      	ands	r3, r2
 800175a:	3301      	adds	r3, #1
 800175c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	6978      	ldr	r0, [r7, #20]
 8001762:	f7fe fccf 	bl	8000104 <__udivsi3>
 8001766:	0003      	movs	r3, r0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e015      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2238      	movs	r2, #56	; 0x38
 8001772:	4013      	ands	r3, r2
 8001774:	2b20      	cmp	r3, #32
 8001776:	d103      	bne.n	8001780 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2238      	movs	r2, #56	; 0x38
 8001786:	4013      	ands	r3, r2
 8001788:	2b18      	cmp	r3, #24
 800178a:	d103      	bne.n	8001794 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800178c:	23fa      	movs	r3, #250	; 0xfa
 800178e:	01db      	lsls	r3, r3, #7
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e001      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001798:	693b      	ldr	r3, [r7, #16]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b006      	add	sp, #24
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40021000 	.word	0x40021000
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	007a1200 	.word	0x007a1200

080017b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80017c8:	f7ff fff2 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017cc:	0004      	movs	r4, r0
 80017ce:	f7ff fb39 	bl	8000e44 <LL_RCC_GetAPB1Prescaler>
 80017d2:	0003      	movs	r3, r0
 80017d4:	0b1a      	lsrs	r2, r3, #12
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	58d3      	ldr	r3, [r2, r3]
 80017dc:	221f      	movs	r2, #31
 80017de:	4013      	ands	r3, r2
 80017e0:	40dc      	lsrs	r4, r3
 80017e2:	0023      	movs	r3, r4
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	08002be8 	.word	0x08002be8

080017f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e046      	b.n	8001890 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2284      	movs	r2, #132	; 0x84
 8001806:	589b      	ldr	r3, [r3, r2]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0018      	movs	r0, r3
 8001818:	f7fe fee6 	bl	80005e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2284      	movs	r2, #132	; 0x84
 8001820:	2124      	movs	r1, #36	; 0x24
 8001822:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f830 	bl	800189c <UART_SetConfig>
 800183c:	0003      	movs	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e024      	b.n	8001890 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0018      	movs	r0, r3
 8001852:	f000 fab3 	bl	8001dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	490d      	ldr	r1, [pc, #52]	; (8001898 <HAL_UART_Init+0xa8>)
 8001862:	400a      	ands	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	212a      	movs	r1, #42	; 0x2a
 8001872:	438a      	bics	r2, r1
 8001874:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	0018      	movs	r0, r3
 800188a:	f000 fb4b 	bl	8001f24 <UART_CheckIdleState>
 800188e:	0003      	movs	r3, r0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	ffffb7ff 	.word	0xffffb7ff

0800189c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b090      	sub	sp, #64	; 0x40
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80018a4:	231a      	movs	r3, #26
 80018a6:	2220      	movs	r2, #32
 80018a8:	4694      	mov	ip, r2
 80018aa:	44bc      	add	ip, r7
 80018ac:	4463      	add	r3, ip
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4ac7      	ldr	r2, [pc, #796]	; (8001bf0 <UART_SetConfig+0x354>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018dc:	430b      	orrs	r3, r1
 80018de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4ac3      	ldr	r2, [pc, #780]	; (8001bf4 <UART_SetConfig+0x358>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	0003      	movs	r3, r0
 80018f6:	430b      	orrs	r3, r1
 80018f8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4abc      	ldr	r2, [pc, #752]	; (8001bf8 <UART_SetConfig+0x35c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001910:	4313      	orrs	r3, r2
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4ab8      	ldr	r2, [pc, #736]	; (8001bfc <UART_SetConfig+0x360>)
 800191c:	4013      	ands	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001926:	430b      	orrs	r3, r1
 8001928:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	220f      	movs	r2, #15
 8001932:	4393      	bics	r3, r2
 8001934:	0018      	movs	r0, r3
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	0003      	movs	r3, r0
 8001940:	430b      	orrs	r3, r1
 8001942:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4aad      	ldr	r2, [pc, #692]	; (8001c00 <UART_SetConfig+0x364>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d136      	bne.n	80019bc <UART_SetConfig+0x120>
 800194e:	4bad      	ldr	r3, [pc, #692]	; (8001c04 <UART_SetConfig+0x368>)
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	2203      	movs	r2, #3
 8001954:	4013      	ands	r3, r2
 8001956:	2b03      	cmp	r3, #3
 8001958:	d020      	beq.n	800199c <UART_SetConfig+0x100>
 800195a:	d827      	bhi.n	80019ac <UART_SetConfig+0x110>
 800195c:	2b02      	cmp	r3, #2
 800195e:	d00d      	beq.n	800197c <UART_SetConfig+0xe0>
 8001960:	d824      	bhi.n	80019ac <UART_SetConfig+0x110>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <UART_SetConfig+0xd0>
 8001966:	2b01      	cmp	r3, #1
 8001968:	d010      	beq.n	800198c <UART_SetConfig+0xf0>
 800196a:	e01f      	b.n	80019ac <UART_SetConfig+0x110>
 800196c:	231b      	movs	r3, #27
 800196e:	2220      	movs	r2, #32
 8001970:	4694      	mov	ip, r2
 8001972:	44bc      	add	ip, r7
 8001974:	4463      	add	r3, ip
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	e07c      	b.n	8001a76 <UART_SetConfig+0x1da>
 800197c:	231b      	movs	r3, #27
 800197e:	2220      	movs	r2, #32
 8001980:	4694      	mov	ip, r2
 8001982:	44bc      	add	ip, r7
 8001984:	4463      	add	r3, ip
 8001986:	2202      	movs	r2, #2
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e074      	b.n	8001a76 <UART_SetConfig+0x1da>
 800198c:	231b      	movs	r3, #27
 800198e:	2220      	movs	r2, #32
 8001990:	4694      	mov	ip, r2
 8001992:	44bc      	add	ip, r7
 8001994:	4463      	add	r3, ip
 8001996:	2204      	movs	r2, #4
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e06c      	b.n	8001a76 <UART_SetConfig+0x1da>
 800199c:	231b      	movs	r3, #27
 800199e:	2220      	movs	r2, #32
 80019a0:	4694      	mov	ip, r2
 80019a2:	44bc      	add	ip, r7
 80019a4:	4463      	add	r3, ip
 80019a6:	2208      	movs	r2, #8
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e064      	b.n	8001a76 <UART_SetConfig+0x1da>
 80019ac:	231b      	movs	r3, #27
 80019ae:	2220      	movs	r2, #32
 80019b0:	4694      	mov	ip, r2
 80019b2:	44bc      	add	ip, r7
 80019b4:	4463      	add	r3, ip
 80019b6:	2210      	movs	r2, #16
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e05c      	b.n	8001a76 <UART_SetConfig+0x1da>
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a91      	ldr	r2, [pc, #580]	; (8001c08 <UART_SetConfig+0x36c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d107      	bne.n	80019d6 <UART_SetConfig+0x13a>
 80019c6:	231b      	movs	r3, #27
 80019c8:	2220      	movs	r2, #32
 80019ca:	4694      	mov	ip, r2
 80019cc:	44bc      	add	ip, r7
 80019ce:	4463      	add	r3, ip
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e04f      	b.n	8001a76 <UART_SetConfig+0x1da>
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <UART_SetConfig+0x35c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d143      	bne.n	8001a68 <UART_SetConfig+0x1cc>
 80019e0:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <UART_SetConfig+0x368>)
 80019e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019e4:	23c0      	movs	r3, #192	; 0xc0
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4013      	ands	r3, r2
 80019ea:	22c0      	movs	r2, #192	; 0xc0
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02a      	beq.n	8001a48 <UART_SetConfig+0x1ac>
 80019f2:	22c0      	movs	r2, #192	; 0xc0
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d82e      	bhi.n	8001a58 <UART_SetConfig+0x1bc>
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d012      	beq.n	8001a28 <UART_SetConfig+0x18c>
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d826      	bhi.n	8001a58 <UART_SetConfig+0x1bc>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <UART_SetConfig+0x17c>
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	00d2      	lsls	r2, r2, #3
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d010      	beq.n	8001a38 <UART_SetConfig+0x19c>
 8001a16:	e01f      	b.n	8001a58 <UART_SetConfig+0x1bc>
 8001a18:	231b      	movs	r3, #27
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	4694      	mov	ip, r2
 8001a1e:	44bc      	add	ip, r7
 8001a20:	4463      	add	r3, ip
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e026      	b.n	8001a76 <UART_SetConfig+0x1da>
 8001a28:	231b      	movs	r3, #27
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	4694      	mov	ip, r2
 8001a2e:	44bc      	add	ip, r7
 8001a30:	4463      	add	r3, ip
 8001a32:	2202      	movs	r2, #2
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e01e      	b.n	8001a76 <UART_SetConfig+0x1da>
 8001a38:	231b      	movs	r3, #27
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	4694      	mov	ip, r2
 8001a3e:	44bc      	add	ip, r7
 8001a40:	4463      	add	r3, ip
 8001a42:	2204      	movs	r2, #4
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	e016      	b.n	8001a76 <UART_SetConfig+0x1da>
 8001a48:	231b      	movs	r3, #27
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	4694      	mov	ip, r2
 8001a4e:	44bc      	add	ip, r7
 8001a50:	4463      	add	r3, ip
 8001a52:	2208      	movs	r2, #8
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e00e      	b.n	8001a76 <UART_SetConfig+0x1da>
 8001a58:	231b      	movs	r3, #27
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	4694      	mov	ip, r2
 8001a5e:	44bc      	add	ip, r7
 8001a60:	4463      	add	r3, ip
 8001a62:	2210      	movs	r2, #16
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e006      	b.n	8001a76 <UART_SetConfig+0x1da>
 8001a68:	231b      	movs	r3, #27
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	4694      	mov	ip, r2
 8001a6e:	44bc      	add	ip, r7
 8001a70:	4463      	add	r3, ip
 8001a72:	2210      	movs	r2, #16
 8001a74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5f      	ldr	r2, [pc, #380]	; (8001bf8 <UART_SetConfig+0x35c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d000      	beq.n	8001a82 <UART_SetConfig+0x1e6>
 8001a80:	e096      	b.n	8001bb0 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001a82:	231b      	movs	r3, #27
 8001a84:	2220      	movs	r2, #32
 8001a86:	4694      	mov	ip, r2
 8001a88:	44bc      	add	ip, r7
 8001a8a:	4463      	add	r3, ip
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d015      	beq.n	8001abe <UART_SetConfig+0x222>
 8001a92:	dc18      	bgt.n	8001ac6 <UART_SetConfig+0x22a>
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d00d      	beq.n	8001ab4 <UART_SetConfig+0x218>
 8001a98:	dc15      	bgt.n	8001ac6 <UART_SetConfig+0x22a>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <UART_SetConfig+0x208>
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d005      	beq.n	8001aae <UART_SetConfig+0x212>
 8001aa2:	e010      	b.n	8001ac6 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001aa4:	f7ff fe8e 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001aac:	e015      	b.n	8001ada <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001aae:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <UART_SetConfig+0x370>)
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ab2:	e012      	b.n	8001ada <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ab4:	f7ff fdfa 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001abc:	e00d      	b.n	8001ada <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ac4:	e009      	b.n	8001ada <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001aca:	231a      	movs	r3, #26
 8001acc:	2220      	movs	r2, #32
 8001ace:	4694      	mov	ip, r2
 8001ad0:	44bc      	add	ip, r7
 8001ad2:	4463      	add	r3, ip
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
        break;
 8001ad8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d100      	bne.n	8001ae2 <UART_SetConfig+0x246>
 8001ae0:	e14f      	b.n	8001d82 <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <UART_SetConfig+0x374>)
 8001ae8:	0052      	lsls	r2, r2, #1
 8001aea:	5ad3      	ldrh	r3, [r2, r3]
 8001aec:	0019      	movs	r1, r3
 8001aee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001af0:	f7fe fb08 	bl	8000104 <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	0013      	movs	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	189b      	adds	r3, r3, r2
 8001b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d305      	bcc.n	8001b14 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d907      	bls.n	8001b24 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8001b14:	231a      	movs	r3, #26
 8001b16:	2220      	movs	r2, #32
 8001b18:	4694      	mov	ip, r2
 8001b1a:	44bc      	add	ip, r7
 8001b1c:	4463      	add	r3, ip
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e12e      	b.n	8001d82 <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b30:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <UART_SetConfig+0x374>)
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	5ad3      	ldrh	r3, [r2, r3]
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	69b8      	ldr	r0, [r7, #24]
 8001b42:	69f9      	ldr	r1, [r7, #28]
 8001b44:	f7fe fb6a 	bl	800021c <__aeabi_uldivmod>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	000b      	movs	r3, r1
 8001b4c:	0e11      	lsrs	r1, r2, #24
 8001b4e:	021d      	lsls	r5, r3, #8
 8001b50:	430d      	orrs	r5, r1
 8001b52:	0214      	lsls	r4, r2, #8
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68b8      	ldr	r0, [r7, #8]
 8001b62:	68f9      	ldr	r1, [r7, #12]
 8001b64:	1900      	adds	r0, r0, r4
 8001b66:	4169      	adcs	r1, r5
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f7fe fb51 	bl	800021c <__aeabi_uldivmod>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	000b      	movs	r3, r1
 8001b7e:	0013      	movs	r3, r2
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b84:	23c0      	movs	r3, #192	; 0xc0
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d309      	bcc.n	8001ba0 <UART_SetConfig+0x304>
 8001b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	035b      	lsls	r3, r3, #13
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d204      	bcs.n	8001ba0 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	e0f0      	b.n	8001d82 <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8001ba0:	231a      	movs	r3, #26
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	4694      	mov	ip, r2
 8001ba6:	44bc      	add	ip, r7
 8001ba8:	4463      	add	r3, ip
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	e0e8      	b.n	8001d82 <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	69da      	ldr	r2, [r3, #28]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d000      	beq.n	8001bbe <UART_SetConfig+0x322>
 8001bbc:	e086      	b.n	8001ccc <UART_SetConfig+0x430>
  {
    switch (clocksource)
 8001bbe:	231b      	movs	r3, #27
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	4694      	mov	ip, r2
 8001bc4:	44bc      	add	ip, r7
 8001bc6:	4463      	add	r3, ip
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d027      	beq.n	8001c1e <UART_SetConfig+0x382>
 8001bce:	dc2a      	bgt.n	8001c26 <UART_SetConfig+0x38a>
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d01f      	beq.n	8001c14 <UART_SetConfig+0x378>
 8001bd4:	dc27      	bgt.n	8001c26 <UART_SetConfig+0x38a>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <UART_SetConfig+0x344>
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d005      	beq.n	8001bea <UART_SetConfig+0x34e>
 8001bde:	e022      	b.n	8001c26 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001be0:	f7ff fdf0 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 8001be4:	0003      	movs	r3, r0
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001be8:	e027      	b.n	8001c3a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <UART_SetConfig+0x370>)
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001bee:	e024      	b.n	8001c3a <UART_SetConfig+0x39e>
 8001bf0:	cfff69f3 	.word	0xcfff69f3
 8001bf4:	ffffcfff 	.word	0xffffcfff
 8001bf8:	40008000 	.word	0x40008000
 8001bfc:	11fff4ff 	.word	0x11fff4ff
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40004400 	.word	0x40004400
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	08002c08 	.word	0x08002c08
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c14:	f7ff fd4a 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001c1c:	e00d      	b.n	8001c3a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001c24:	e009      	b.n	8001c3a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001c2a:	231a      	movs	r3, #26
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	4694      	mov	ip, r2
 8001c30:	44bc      	add	ip, r7
 8001c32:	4463      	add	r3, ip
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
        break;
 8001c38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d100      	bne.n	8001c42 <UART_SetConfig+0x3a6>
 8001c40:	e09f      	b.n	8001d82 <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <UART_SetConfig+0x518>)
 8001c48:	0052      	lsls	r2, r2, #1
 8001c4a:	5ad3      	ldrh	r3, [r2, r3]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c50:	f7fe fa58 	bl	8000104 <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	005a      	lsls	r2, r3, #1
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	18d2      	adds	r2, r2, r3
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f7fe fa4c 	bl	8000104 <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d921      	bls.n	8001cbc <UART_SetConfig+0x420>
 8001c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d21c      	bcs.n	8001cbc <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	200e      	movs	r0, #14
 8001c88:	2420      	movs	r4, #32
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	181b      	adds	r3, r3, r0
 8001c8e:	210f      	movs	r1, #15
 8001c90:	438a      	bics	r2, r1
 8001c92:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b299      	uxth	r1, r3
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	181b      	adds	r3, r3, r0
 8001ca4:	193a      	adds	r2, r7, r4
 8001ca6:	1812      	adds	r2, r2, r0
 8001ca8:	8812      	ldrh	r2, [r2, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	193a      	adds	r2, r7, r4
 8001cb4:	1812      	adds	r2, r2, r0
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	e062      	b.n	8001d82 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8001cbc:	231a      	movs	r3, #26
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	4694      	mov	ip, r2
 8001cc2:	44bc      	add	ip, r7
 8001cc4:	4463      	add	r3, ip
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e05a      	b.n	8001d82 <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ccc:	231b      	movs	r3, #27
 8001cce:	2220      	movs	r2, #32
 8001cd0:	4694      	mov	ip, r2
 8001cd2:	44bc      	add	ip, r7
 8001cd4:	4463      	add	r3, ip
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d015      	beq.n	8001d08 <UART_SetConfig+0x46c>
 8001cdc:	dc18      	bgt.n	8001d10 <UART_SetConfig+0x474>
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d00d      	beq.n	8001cfe <UART_SetConfig+0x462>
 8001ce2:	dc15      	bgt.n	8001d10 <UART_SetConfig+0x474>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <UART_SetConfig+0x452>
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d005      	beq.n	8001cf8 <UART_SetConfig+0x45c>
 8001cec:	e010      	b.n	8001d10 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cee:	f7ff fd69 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cf6:	e015      	b.n	8001d24 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <UART_SetConfig+0x51c>)
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cfc:	e012      	b.n	8001d24 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001cfe:	f7ff fcd5 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001d02:	0003      	movs	r3, r0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001d06:	e00d      	b.n	8001d24 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001d0e:	e009      	b.n	8001d24 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001d14:	231a      	movs	r3, #26
 8001d16:	2220      	movs	r2, #32
 8001d18:	4694      	mov	ip, r2
 8001d1a:	44bc      	add	ip, r7
 8001d1c:	4463      	add	r3, ip
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
        break;
 8001d22:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d02b      	beq.n	8001d82 <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <UART_SetConfig+0x518>)
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	5ad3      	ldrh	r3, [r2, r3]
 8001d34:	0019      	movs	r1, r3
 8001d36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d38:	f7fe f9e4 	bl	8000104 <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	001a      	movs	r2, r3
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	18d2      	adds	r2, r2, r3
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	0010      	movs	r0, r2
 8001d50:	f7fe f9d8 	bl	8000104 <__udivsi3>
 8001d54:	0003      	movs	r3, r0
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d909      	bls.n	8001d74 <UART_SetConfig+0x4d8>
 8001d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	025b      	lsls	r3, r3, #9
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d204      	bcs.n	8001d74 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	e006      	b.n	8001d82 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8001d74:	231a      	movs	r3, #26
 8001d76:	2220      	movs	r2, #32
 8001d78:	4694      	mov	ip, r2
 8001d7a:	44bc      	add	ip, r7
 8001d7c:	4463      	add	r3, ip
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	226a      	movs	r2, #106	; 0x6a
 8001d86:	2101      	movs	r1, #1
 8001d88:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	2268      	movs	r2, #104	; 0x68
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	2200      	movs	r2, #0
 8001d96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8001d9e:	231a      	movs	r3, #26
 8001da0:	2220      	movs	r2, #32
 8001da2:	4694      	mov	ip, r2
 8001da4:	44bc      	add	ip, r7
 8001da6:	4463      	add	r3, ip
 8001da8:	781b      	ldrb	r3, [r3, #0]
}
 8001daa:	0018      	movs	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b010      	add	sp, #64	; 0x40
 8001db0:	bdb0      	pop	{r4, r5, r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	08002c08 	.word	0x08002c08
 8001db8:	00f42400 	.word	0x00f42400

08001dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d00b      	beq.n	8001de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <UART_AdvFeatureConfig+0x144>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d00b      	beq.n	8001e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a43      	ldr	r2, [pc, #268]	; (8001f04 <UART_AdvFeatureConfig+0x148>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d00b      	beq.n	8001e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <UART_AdvFeatureConfig+0x14c>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	2208      	movs	r2, #8
 8001e30:	4013      	ands	r3, r2
 8001e32:	d00b      	beq.n	8001e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a34      	ldr	r2, [pc, #208]	; (8001f0c <UART_AdvFeatureConfig+0x150>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	2210      	movs	r2, #16
 8001e52:	4013      	ands	r3, r2
 8001e54:	d00b      	beq.n	8001e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <UART_AdvFeatureConfig+0x154>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	2220      	movs	r2, #32
 8001e74:	4013      	ands	r3, r2
 8001e76:	d00b      	beq.n	8001e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <UART_AdvFeatureConfig+0x158>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	4013      	ands	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <UART_AdvFeatureConfig+0x15c>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	035b      	lsls	r3, r3, #13
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d10b      	bne.n	8001ed6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <UART_AdvFeatureConfig+0x160>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	4013      	ands	r3, r2
 8001ede:	d00b      	beq.n	8001ef8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <UART_AdvFeatureConfig+0x164>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]
  }
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b002      	add	sp, #8
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	fffdffff 	.word	0xfffdffff
 8001f04:	fffeffff 	.word	0xfffeffff
 8001f08:	fffbffff 	.word	0xfffbffff
 8001f0c:	ffff7fff 	.word	0xffff7fff
 8001f10:	ffffefff 	.word	0xffffefff
 8001f14:	ffffdfff 	.word	0xffffdfff
 8001f18:	ffefffff 	.word	0xffefffff
 8001f1c:	ff9fffff 	.word	0xff9fffff
 8001f20:	fff7ffff 	.word	0xfff7ffff

08001f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	228c      	movs	r2, #140	; 0x8c
 8001f30:	2100      	movs	r1, #0
 8001f32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001f34:	f7fe fd00 	bl	8000938 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2208      	movs	r2, #8
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d10c      	bne.n	8001f64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2280      	movs	r2, #128	; 0x80
 8001f4e:	0391      	lsls	r1, r2, #14
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <UART_CheckIdleState+0x90>)
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f000 f82e 	bl	8001fb8 <UART_WaitOnFlagUntilTimeout>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e023      	b.n	8001fac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d10c      	bne.n	8001f8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	03d1      	lsls	r1, r2, #15
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <UART_CheckIdleState+0x90>)
 8001f7c:	9200      	str	r2, [sp, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f000 f81a 	bl	8001fb8 <UART_WaitOnFlagUntilTimeout>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d001      	beq.n	8001f8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e00f      	b.n	8001fac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2284      	movs	r2, #132	; 0x84
 8001f90:	2120      	movs	r1, #32
 8001f92:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2288      	movs	r2, #136	; 0x88
 8001f98:	2120      	movs	r1, #32
 8001f9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b004      	add	sp, #16
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	01ffffff 	.word	0x01ffffff

08001fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc8:	e0a7      	b.n	800211a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fcc:	3301      	adds	r3, #1
 8001fce:	d100      	bne.n	8001fd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8001fd0:	e0a3      	b.n	800211a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd2:	f7fe fcb1 	bl	8000938 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d302      	bcc.n	8001fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d13f      	bne.n	8002068 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	f383 8810 	msr	PRIMASK, r3
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	494e      	ldr	r1, [pc, #312]	; (8002144 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	f383 8810 	msr	PRIMASK, r3
}
 8002018:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800201a:	f3ef 8310 	mrs	r3, PRIMASK
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
 8002024:	2301      	movs	r3, #1
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202a:	f383 8810 	msr	PRIMASK, r3
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2101      	movs	r1, #1
 800203c:	438a      	bics	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002046:	f383 8810 	msr	PRIMASK, r3
}
 800204a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2284      	movs	r2, #132	; 0x84
 8002050:	2120      	movs	r1, #32
 8002052:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2288      	movs	r2, #136	; 0x88
 8002058:	2120      	movs	r1, #32
 800205a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e069      	b.n	800213c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d052      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	401a      	ands	r2, r3
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	429a      	cmp	r2, r3
 8002086:	d148      	bne.n	800211a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002092:	f3ef 8310 	mrs	r3, PRIMASK
 8002096:	613b      	str	r3, [r7, #16]
  return(result);
 8002098:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800209a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800209c:	2301      	movs	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f383 8810 	msr	PRIMASK, r3
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4924      	ldr	r1, [pc, #144]	; (8002144 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f383 8810 	msr	PRIMASK, r3
}
 80020c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020c4:	f3ef 8310 	mrs	r3, PRIMASK
 80020c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80020ca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80020ce:	2301      	movs	r3, #1
 80020d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f383 8810 	msr	PRIMASK, r3
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	438a      	bics	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	f383 8810 	msr	PRIMASK, r3
}
 80020f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2284      	movs	r2, #132	; 0x84
 80020fa:	2120      	movs	r1, #32
 80020fc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2288      	movs	r2, #136	; 0x88
 8002102:	2120      	movs	r1, #32
 8002104:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	228c      	movs	r2, #140	; 0x8c
 800210a:	2120      	movs	r1, #32
 800210c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e010      	b.n	800213c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	425a      	negs	r2, r3
 800212a:	4153      	adcs	r3, r2
 800212c:	b2db      	uxtb	r3, r3
 800212e:	001a      	movs	r2, r3
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d100      	bne.n	800213a <UART_WaitOnFlagUntilTimeout+0x182>
 8002138:	e747      	b.n	8001fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b014      	add	sp, #80	; 0x50
 8002142:	bd80      	pop	{r7, pc}
 8002144:	fffffe5f 	.word	0xfffffe5f

08002148 <__errno>:
 8002148:	4b01      	ldr	r3, [pc, #4]	; (8002150 <__errno+0x8>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	4770      	bx	lr
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	2000000c 	.word	0x2000000c

08002154 <__libc_init_array>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	2600      	movs	r6, #0
 8002158:	4d0c      	ldr	r5, [pc, #48]	; (800218c <__libc_init_array+0x38>)
 800215a:	4c0d      	ldr	r4, [pc, #52]	; (8002190 <__libc_init_array+0x3c>)
 800215c:	1b64      	subs	r4, r4, r5
 800215e:	10a4      	asrs	r4, r4, #2
 8002160:	42a6      	cmp	r6, r4
 8002162:	d109      	bne.n	8002178 <__libc_init_array+0x24>
 8002164:	2600      	movs	r6, #0
 8002166:	f000 fd13 	bl	8002b90 <_init>
 800216a:	4d0a      	ldr	r5, [pc, #40]	; (8002194 <__libc_init_array+0x40>)
 800216c:	4c0a      	ldr	r4, [pc, #40]	; (8002198 <__libc_init_array+0x44>)
 800216e:	1b64      	subs	r4, r4, r5
 8002170:	10a4      	asrs	r4, r4, #2
 8002172:	42a6      	cmp	r6, r4
 8002174:	d105      	bne.n	8002182 <__libc_init_array+0x2e>
 8002176:	bd70      	pop	{r4, r5, r6, pc}
 8002178:	00b3      	lsls	r3, r6, #2
 800217a:	58eb      	ldr	r3, [r5, r3]
 800217c:	4798      	blx	r3
 800217e:	3601      	adds	r6, #1
 8002180:	e7ee      	b.n	8002160 <__libc_init_array+0xc>
 8002182:	00b3      	lsls	r3, r6, #2
 8002184:	58eb      	ldr	r3, [r5, r3]
 8002186:	4798      	blx	r3
 8002188:	3601      	adds	r6, #1
 800218a:	e7f2      	b.n	8002172 <__libc_init_array+0x1e>
 800218c:	08002c8c 	.word	0x08002c8c
 8002190:	08002c8c 	.word	0x08002c8c
 8002194:	08002c8c 	.word	0x08002c8c
 8002198:	08002c90 	.word	0x08002c90

0800219c <memset>:
 800219c:	0003      	movs	r3, r0
 800219e:	1882      	adds	r2, r0, r2
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d100      	bne.n	80021a6 <memset+0xa>
 80021a4:	4770      	bx	lr
 80021a6:	7019      	strb	r1, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	e7f9      	b.n	80021a0 <memset+0x4>

080021ac <putchar>:
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <putchar+0x24>)
 80021ae:	b570      	push	{r4, r5, r6, lr}
 80021b0:	681c      	ldr	r4, [r3, #0]
 80021b2:	0005      	movs	r5, r0
 80021b4:	2c00      	cmp	r4, #0
 80021b6:	d005      	beq.n	80021c4 <putchar+0x18>
 80021b8:	69a3      	ldr	r3, [r4, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <putchar+0x18>
 80021be:	0020      	movs	r0, r4
 80021c0:	f000 f86a 	bl	8002298 <__sinit>
 80021c4:	0029      	movs	r1, r5
 80021c6:	0020      	movs	r0, r4
 80021c8:	68a2      	ldr	r2, [r4, #8]
 80021ca:	f000 f967 	bl	800249c <_putc_r>
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <std>:
 80021d4:	2300      	movs	r3, #0
 80021d6:	b510      	push	{r4, lr}
 80021d8:	0004      	movs	r4, r0
 80021da:	6003      	str	r3, [r0, #0]
 80021dc:	6043      	str	r3, [r0, #4]
 80021de:	6083      	str	r3, [r0, #8]
 80021e0:	8181      	strh	r1, [r0, #12]
 80021e2:	6643      	str	r3, [r0, #100]	; 0x64
 80021e4:	0019      	movs	r1, r3
 80021e6:	81c2      	strh	r2, [r0, #14]
 80021e8:	6103      	str	r3, [r0, #16]
 80021ea:	6143      	str	r3, [r0, #20]
 80021ec:	6183      	str	r3, [r0, #24]
 80021ee:	2208      	movs	r2, #8
 80021f0:	305c      	adds	r0, #92	; 0x5c
 80021f2:	f7ff ffd3 	bl	800219c <memset>
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <std+0x38>)
 80021f8:	6263      	str	r3, [r4, #36]	; 0x24
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <std+0x3c>)
 80021fc:	6224      	str	r4, [r4, #32]
 80021fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <std+0x40>)
 8002202:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <std+0x44>)
 8002206:	6323      	str	r3, [r4, #48]	; 0x30
 8002208:	bd10      	pop	{r4, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	08002555 	.word	0x08002555
 8002210:	0800257d 	.word	0x0800257d
 8002214:	080025b5 	.word	0x080025b5
 8002218:	080025e1 	.word	0x080025e1

0800221c <_cleanup_r>:
 800221c:	b510      	push	{r4, lr}
 800221e:	4902      	ldr	r1, [pc, #8]	; (8002228 <_cleanup_r+0xc>)
 8002220:	f000 f8ba 	bl	8002398 <_fwalk_reent>
 8002224:	bd10      	pop	{r4, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	080028ed 	.word	0x080028ed

0800222c <__sfmoreglue>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	2568      	movs	r5, #104	; 0x68
 8002230:	1e4a      	subs	r2, r1, #1
 8002232:	4355      	muls	r5, r2
 8002234:	000e      	movs	r6, r1
 8002236:	0029      	movs	r1, r5
 8002238:	3174      	adds	r1, #116	; 0x74
 800223a:	f000 f8d1 	bl	80023e0 <_malloc_r>
 800223e:	1e04      	subs	r4, r0, #0
 8002240:	d008      	beq.n	8002254 <__sfmoreglue+0x28>
 8002242:	2100      	movs	r1, #0
 8002244:	002a      	movs	r2, r5
 8002246:	6001      	str	r1, [r0, #0]
 8002248:	6046      	str	r6, [r0, #4]
 800224a:	300c      	adds	r0, #12
 800224c:	60a0      	str	r0, [r4, #8]
 800224e:	3268      	adds	r2, #104	; 0x68
 8002250:	f7ff ffa4 	bl	800219c <memset>
 8002254:	0020      	movs	r0, r4
 8002256:	bd70      	pop	{r4, r5, r6, pc}

08002258 <__sfp_lock_acquire>:
 8002258:	b510      	push	{r4, lr}
 800225a:	4802      	ldr	r0, [pc, #8]	; (8002264 <__sfp_lock_acquire+0xc>)
 800225c:	f000 f8bd 	bl	80023da <__retarget_lock_acquire_recursive>
 8002260:	bd10      	pop	{r4, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000134 	.word	0x20000134

08002268 <__sfp_lock_release>:
 8002268:	b510      	push	{r4, lr}
 800226a:	4802      	ldr	r0, [pc, #8]	; (8002274 <__sfp_lock_release+0xc>)
 800226c:	f000 f8b6 	bl	80023dc <__retarget_lock_release_recursive>
 8002270:	bd10      	pop	{r4, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	20000134 	.word	0x20000134

08002278 <__sinit_lock_acquire>:
 8002278:	b510      	push	{r4, lr}
 800227a:	4802      	ldr	r0, [pc, #8]	; (8002284 <__sinit_lock_acquire+0xc>)
 800227c:	f000 f8ad 	bl	80023da <__retarget_lock_acquire_recursive>
 8002280:	bd10      	pop	{r4, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	2000012f 	.word	0x2000012f

08002288 <__sinit_lock_release>:
 8002288:	b510      	push	{r4, lr}
 800228a:	4802      	ldr	r0, [pc, #8]	; (8002294 <__sinit_lock_release+0xc>)
 800228c:	f000 f8a6 	bl	80023dc <__retarget_lock_release_recursive>
 8002290:	bd10      	pop	{r4, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	2000012f 	.word	0x2000012f

08002298 <__sinit>:
 8002298:	b513      	push	{r0, r1, r4, lr}
 800229a:	0004      	movs	r4, r0
 800229c:	f7ff ffec 	bl	8002278 <__sinit_lock_acquire>
 80022a0:	69a3      	ldr	r3, [r4, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <__sinit+0x14>
 80022a6:	f7ff ffef 	bl	8002288 <__sinit_lock_release>
 80022aa:	bd13      	pop	{r0, r1, r4, pc}
 80022ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80022ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80022b0:	6523      	str	r3, [r4, #80]	; 0x50
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <__sinit+0x68>)
 80022b4:	4a13      	ldr	r2, [pc, #76]	; (8002304 <__sinit+0x6c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	42a3      	cmp	r3, r4
 80022be:	d101      	bne.n	80022c4 <__sinit+0x2c>
 80022c0:	2301      	movs	r3, #1
 80022c2:	61a3      	str	r3, [r4, #24]
 80022c4:	0020      	movs	r0, r4
 80022c6:	f000 f81f 	bl	8002308 <__sfp>
 80022ca:	6060      	str	r0, [r4, #4]
 80022cc:	0020      	movs	r0, r4
 80022ce:	f000 f81b 	bl	8002308 <__sfp>
 80022d2:	60a0      	str	r0, [r4, #8]
 80022d4:	0020      	movs	r0, r4
 80022d6:	f000 f817 	bl	8002308 <__sfp>
 80022da:	2200      	movs	r2, #0
 80022dc:	2104      	movs	r1, #4
 80022de:	60e0      	str	r0, [r4, #12]
 80022e0:	6860      	ldr	r0, [r4, #4]
 80022e2:	f7ff ff77 	bl	80021d4 <std>
 80022e6:	2201      	movs	r2, #1
 80022e8:	2109      	movs	r1, #9
 80022ea:	68a0      	ldr	r0, [r4, #8]
 80022ec:	f7ff ff72 	bl	80021d4 <std>
 80022f0:	2202      	movs	r2, #2
 80022f2:	2112      	movs	r1, #18
 80022f4:	68e0      	ldr	r0, [r4, #12]
 80022f6:	f7ff ff6d 	bl	80021d4 <std>
 80022fa:	2301      	movs	r3, #1
 80022fc:	61a3      	str	r3, [r4, #24]
 80022fe:	e7d2      	b.n	80022a6 <__sinit+0xe>
 8002300:	08002c20 	.word	0x08002c20
 8002304:	0800221d 	.word	0x0800221d

08002308 <__sfp>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	0007      	movs	r7, r0
 800230c:	f7ff ffa4 	bl	8002258 <__sfp_lock_acquire>
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <__sfp+0x88>)
 8002312:	681e      	ldr	r6, [r3, #0]
 8002314:	69b3      	ldr	r3, [r6, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <__sfp+0x18>
 800231a:	0030      	movs	r0, r6
 800231c:	f7ff ffbc 	bl	8002298 <__sinit>
 8002320:	3648      	adds	r6, #72	; 0x48
 8002322:	68b4      	ldr	r4, [r6, #8]
 8002324:	6873      	ldr	r3, [r6, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	d504      	bpl.n	8002334 <__sfp+0x2c>
 800232a:	6833      	ldr	r3, [r6, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d022      	beq.n	8002376 <__sfp+0x6e>
 8002330:	6836      	ldr	r6, [r6, #0]
 8002332:	e7f6      	b.n	8002322 <__sfp+0x1a>
 8002334:	220c      	movs	r2, #12
 8002336:	5ea5      	ldrsh	r5, [r4, r2]
 8002338:	2d00      	cmp	r5, #0
 800233a:	d11a      	bne.n	8002372 <__sfp+0x6a>
 800233c:	0020      	movs	r0, r4
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <__sfp+0x8c>)
 8002340:	3058      	adds	r0, #88	; 0x58
 8002342:	60e3      	str	r3, [r4, #12]
 8002344:	6665      	str	r5, [r4, #100]	; 0x64
 8002346:	f000 f847 	bl	80023d8 <__retarget_lock_init_recursive>
 800234a:	f7ff ff8d 	bl	8002268 <__sfp_lock_release>
 800234e:	0020      	movs	r0, r4
 8002350:	2208      	movs	r2, #8
 8002352:	0029      	movs	r1, r5
 8002354:	6025      	str	r5, [r4, #0]
 8002356:	60a5      	str	r5, [r4, #8]
 8002358:	6065      	str	r5, [r4, #4]
 800235a:	6125      	str	r5, [r4, #16]
 800235c:	6165      	str	r5, [r4, #20]
 800235e:	61a5      	str	r5, [r4, #24]
 8002360:	305c      	adds	r0, #92	; 0x5c
 8002362:	f7ff ff1b 	bl	800219c <memset>
 8002366:	6365      	str	r5, [r4, #52]	; 0x34
 8002368:	63a5      	str	r5, [r4, #56]	; 0x38
 800236a:	64a5      	str	r5, [r4, #72]	; 0x48
 800236c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800236e:	0020      	movs	r0, r4
 8002370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002372:	3468      	adds	r4, #104	; 0x68
 8002374:	e7d7      	b.n	8002326 <__sfp+0x1e>
 8002376:	2104      	movs	r1, #4
 8002378:	0038      	movs	r0, r7
 800237a:	f7ff ff57 	bl	800222c <__sfmoreglue>
 800237e:	1e04      	subs	r4, r0, #0
 8002380:	6030      	str	r0, [r6, #0]
 8002382:	d1d5      	bne.n	8002330 <__sfp+0x28>
 8002384:	f7ff ff70 	bl	8002268 <__sfp_lock_release>
 8002388:	230c      	movs	r3, #12
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	e7ef      	b.n	800236e <__sfp+0x66>
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	08002c20 	.word	0x08002c20
 8002394:	ffff0001 	.word	0xffff0001

08002398 <_fwalk_reent>:
 8002398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800239a:	0004      	movs	r4, r0
 800239c:	0006      	movs	r6, r0
 800239e:	2700      	movs	r7, #0
 80023a0:	9101      	str	r1, [sp, #4]
 80023a2:	3448      	adds	r4, #72	; 0x48
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	68a5      	ldr	r5, [r4, #8]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	9b00      	ldr	r3, [sp, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	d504      	bpl.n	80023bc <_fwalk_reent+0x24>
 80023b2:	6824      	ldr	r4, [r4, #0]
 80023b4:	2c00      	cmp	r4, #0
 80023b6:	d1f5      	bne.n	80023a4 <_fwalk_reent+0xc>
 80023b8:	0038      	movs	r0, r7
 80023ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023bc:	89ab      	ldrh	r3, [r5, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d908      	bls.n	80023d4 <_fwalk_reent+0x3c>
 80023c2:	220e      	movs	r2, #14
 80023c4:	5eab      	ldrsh	r3, [r5, r2]
 80023c6:	3301      	adds	r3, #1
 80023c8:	d004      	beq.n	80023d4 <_fwalk_reent+0x3c>
 80023ca:	0029      	movs	r1, r5
 80023cc:	0030      	movs	r0, r6
 80023ce:	9b01      	ldr	r3, [sp, #4]
 80023d0:	4798      	blx	r3
 80023d2:	4307      	orrs	r7, r0
 80023d4:	3568      	adds	r5, #104	; 0x68
 80023d6:	e7e8      	b.n	80023aa <_fwalk_reent+0x12>

080023d8 <__retarget_lock_init_recursive>:
 80023d8:	4770      	bx	lr

080023da <__retarget_lock_acquire_recursive>:
 80023da:	4770      	bx	lr

080023dc <__retarget_lock_release_recursive>:
 80023dc:	4770      	bx	lr
	...

080023e0 <_malloc_r>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	2303      	movs	r3, #3
 80023e4:	1ccd      	adds	r5, r1, #3
 80023e6:	439d      	bics	r5, r3
 80023e8:	3508      	adds	r5, #8
 80023ea:	0006      	movs	r6, r0
 80023ec:	2d0c      	cmp	r5, #12
 80023ee:	d21f      	bcs.n	8002430 <_malloc_r+0x50>
 80023f0:	250c      	movs	r5, #12
 80023f2:	42a9      	cmp	r1, r5
 80023f4:	d81e      	bhi.n	8002434 <_malloc_r+0x54>
 80023f6:	0030      	movs	r0, r6
 80023f8:	f000 fb38 	bl	8002a6c <__malloc_lock>
 80023fc:	4925      	ldr	r1, [pc, #148]	; (8002494 <_malloc_r+0xb4>)
 80023fe:	680a      	ldr	r2, [r1, #0]
 8002400:	0014      	movs	r4, r2
 8002402:	2c00      	cmp	r4, #0
 8002404:	d11a      	bne.n	800243c <_malloc_r+0x5c>
 8002406:	4f24      	ldr	r7, [pc, #144]	; (8002498 <_malloc_r+0xb8>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d104      	bne.n	8002418 <_malloc_r+0x38>
 800240e:	0021      	movs	r1, r4
 8002410:	0030      	movs	r0, r6
 8002412:	f000 f88d 	bl	8002530 <_sbrk_r>
 8002416:	6038      	str	r0, [r7, #0]
 8002418:	0029      	movs	r1, r5
 800241a:	0030      	movs	r0, r6
 800241c:	f000 f888 	bl	8002530 <_sbrk_r>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	d12b      	bne.n	800247c <_malloc_r+0x9c>
 8002424:	230c      	movs	r3, #12
 8002426:	0030      	movs	r0, r6
 8002428:	6033      	str	r3, [r6, #0]
 800242a:	f000 fb27 	bl	8002a7c <__malloc_unlock>
 800242e:	e003      	b.n	8002438 <_malloc_r+0x58>
 8002430:	2d00      	cmp	r5, #0
 8002432:	dade      	bge.n	80023f2 <_malloc_r+0x12>
 8002434:	230c      	movs	r3, #12
 8002436:	6033      	str	r3, [r6, #0]
 8002438:	2000      	movs	r0, #0
 800243a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	1b5b      	subs	r3, r3, r5
 8002440:	d419      	bmi.n	8002476 <_malloc_r+0x96>
 8002442:	2b0b      	cmp	r3, #11
 8002444:	d903      	bls.n	800244e <_malloc_r+0x6e>
 8002446:	6023      	str	r3, [r4, #0]
 8002448:	18e4      	adds	r4, r4, r3
 800244a:	6025      	str	r5, [r4, #0]
 800244c:	e003      	b.n	8002456 <_malloc_r+0x76>
 800244e:	6863      	ldr	r3, [r4, #4]
 8002450:	42a2      	cmp	r2, r4
 8002452:	d10e      	bne.n	8002472 <_malloc_r+0x92>
 8002454:	600b      	str	r3, [r1, #0]
 8002456:	0030      	movs	r0, r6
 8002458:	f000 fb10 	bl	8002a7c <__malloc_unlock>
 800245c:	0020      	movs	r0, r4
 800245e:	2207      	movs	r2, #7
 8002460:	300b      	adds	r0, #11
 8002462:	1d23      	adds	r3, r4, #4
 8002464:	4390      	bics	r0, r2
 8002466:	1ac2      	subs	r2, r0, r3
 8002468:	4298      	cmp	r0, r3
 800246a:	d0e6      	beq.n	800243a <_malloc_r+0x5a>
 800246c:	1a1b      	subs	r3, r3, r0
 800246e:	50a3      	str	r3, [r4, r2]
 8002470:	e7e3      	b.n	800243a <_malloc_r+0x5a>
 8002472:	6053      	str	r3, [r2, #4]
 8002474:	e7ef      	b.n	8002456 <_malloc_r+0x76>
 8002476:	0022      	movs	r2, r4
 8002478:	6864      	ldr	r4, [r4, #4]
 800247a:	e7c2      	b.n	8002402 <_malloc_r+0x22>
 800247c:	2303      	movs	r3, #3
 800247e:	1cc4      	adds	r4, r0, #3
 8002480:	439c      	bics	r4, r3
 8002482:	42a0      	cmp	r0, r4
 8002484:	d0e1      	beq.n	800244a <_malloc_r+0x6a>
 8002486:	1a21      	subs	r1, r4, r0
 8002488:	0030      	movs	r0, r6
 800248a:	f000 f851 	bl	8002530 <_sbrk_r>
 800248e:	1c43      	adds	r3, r0, #1
 8002490:	d1db      	bne.n	800244a <_malloc_r+0x6a>
 8002492:	e7c7      	b.n	8002424 <_malloc_r+0x44>
 8002494:	20000090 	.word	0x20000090
 8002498:	20000094 	.word	0x20000094

0800249c <_putc_r>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	0006      	movs	r6, r0
 80024a0:	000d      	movs	r5, r1
 80024a2:	0014      	movs	r4, r2
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d004      	beq.n	80024b2 <_putc_r+0x16>
 80024a8:	6983      	ldr	r3, [r0, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <_putc_r+0x16>
 80024ae:	f7ff fef3 	bl	8002298 <__sinit>
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <_putc_r+0x88>)
 80024b4:	429c      	cmp	r4, r3
 80024b6:	d124      	bne.n	8002502 <_putc_r+0x66>
 80024b8:	6874      	ldr	r4, [r6, #4]
 80024ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024bc:	07db      	lsls	r3, r3, #31
 80024be:	d405      	bmi.n	80024cc <_putc_r+0x30>
 80024c0:	89a3      	ldrh	r3, [r4, #12]
 80024c2:	059b      	lsls	r3, r3, #22
 80024c4:	d402      	bmi.n	80024cc <_putc_r+0x30>
 80024c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024c8:	f7ff ff87 	bl	80023da <__retarget_lock_acquire_recursive>
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	60a3      	str	r3, [r4, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da05      	bge.n	80024e2 <_putc_r+0x46>
 80024d6:	69a2      	ldr	r2, [r4, #24]
 80024d8:	4293      	cmp	r3, r2
 80024da:	db1c      	blt.n	8002516 <_putc_r+0x7a>
 80024dc:	b2eb      	uxtb	r3, r5
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d019      	beq.n	8002516 <_putc_r+0x7a>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	6022      	str	r2, [r4, #0]
 80024e8:	701d      	strb	r5, [r3, #0]
 80024ea:	b2ed      	uxtb	r5, r5
 80024ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024ee:	07db      	lsls	r3, r3, #31
 80024f0:	d405      	bmi.n	80024fe <_putc_r+0x62>
 80024f2:	89a3      	ldrh	r3, [r4, #12]
 80024f4:	059b      	lsls	r3, r3, #22
 80024f6:	d402      	bmi.n	80024fe <_putc_r+0x62>
 80024f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024fa:	f7ff ff6f 	bl	80023dc <__retarget_lock_release_recursive>
 80024fe:	0028      	movs	r0, r5
 8002500:	bd70      	pop	{r4, r5, r6, pc}
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <_putc_r+0x8c>)
 8002504:	429c      	cmp	r4, r3
 8002506:	d101      	bne.n	800250c <_putc_r+0x70>
 8002508:	68b4      	ldr	r4, [r6, #8]
 800250a:	e7d6      	b.n	80024ba <_putc_r+0x1e>
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <_putc_r+0x90>)
 800250e:	429c      	cmp	r4, r3
 8002510:	d1d3      	bne.n	80024ba <_putc_r+0x1e>
 8002512:	68f4      	ldr	r4, [r6, #12]
 8002514:	e7d1      	b.n	80024ba <_putc_r+0x1e>
 8002516:	0029      	movs	r1, r5
 8002518:	0022      	movs	r2, r4
 800251a:	0030      	movs	r0, r6
 800251c:	f000 f866 	bl	80025ec <__swbuf_r>
 8002520:	0005      	movs	r5, r0
 8002522:	e7e3      	b.n	80024ec <_putc_r+0x50>
 8002524:	08002c44 	.word	0x08002c44
 8002528:	08002c64 	.word	0x08002c64
 800252c:	08002c24 	.word	0x08002c24

08002530 <_sbrk_r>:
 8002530:	2300      	movs	r3, #0
 8002532:	b570      	push	{r4, r5, r6, lr}
 8002534:	4d06      	ldr	r5, [pc, #24]	; (8002550 <_sbrk_r+0x20>)
 8002536:	0004      	movs	r4, r0
 8002538:	0008      	movs	r0, r1
 800253a:	602b      	str	r3, [r5, #0]
 800253c:	f7fe f91a 	bl	8000774 <_sbrk>
 8002540:	1c43      	adds	r3, r0, #1
 8002542:	d103      	bne.n	800254c <_sbrk_r+0x1c>
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d000      	beq.n	800254c <_sbrk_r+0x1c>
 800254a:	6023      	str	r3, [r4, #0]
 800254c:	bd70      	pop	{r4, r5, r6, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	20000138 	.word	0x20000138

08002554 <__sread>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	000c      	movs	r4, r1
 8002558:	250e      	movs	r5, #14
 800255a:	5f49      	ldrsh	r1, [r1, r5]
 800255c:	f000 fae0 	bl	8002b20 <_read_r>
 8002560:	2800      	cmp	r0, #0
 8002562:	db03      	blt.n	800256c <__sread+0x18>
 8002564:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002566:	181b      	adds	r3, r3, r0
 8002568:	6563      	str	r3, [r4, #84]	; 0x54
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	89a3      	ldrh	r3, [r4, #12]
 800256e:	4a02      	ldr	r2, [pc, #8]	; (8002578 <__sread+0x24>)
 8002570:	4013      	ands	r3, r2
 8002572:	81a3      	strh	r3, [r4, #12]
 8002574:	e7f9      	b.n	800256a <__sread+0x16>
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	ffffefff 	.word	0xffffefff

0800257c <__swrite>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	001f      	movs	r7, r3
 8002580:	898b      	ldrh	r3, [r1, #12]
 8002582:	0005      	movs	r5, r0
 8002584:	000c      	movs	r4, r1
 8002586:	0016      	movs	r6, r2
 8002588:	05db      	lsls	r3, r3, #23
 800258a:	d505      	bpl.n	8002598 <__swrite+0x1c>
 800258c:	230e      	movs	r3, #14
 800258e:	5ec9      	ldrsh	r1, [r1, r3]
 8002590:	2200      	movs	r2, #0
 8002592:	2302      	movs	r3, #2
 8002594:	f000 f9ea 	bl	800296c <_lseek_r>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <__swrite+0x34>)
 800259c:	0028      	movs	r0, r5
 800259e:	4013      	ands	r3, r2
 80025a0:	81a3      	strh	r3, [r4, #12]
 80025a2:	0032      	movs	r2, r6
 80025a4:	230e      	movs	r3, #14
 80025a6:	5ee1      	ldrsh	r1, [r4, r3]
 80025a8:	003b      	movs	r3, r7
 80025aa:	f000 f875 	bl	8002698 <_write_r>
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	ffffefff 	.word	0xffffefff

080025b4 <__sseek>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	000c      	movs	r4, r1
 80025b8:	250e      	movs	r5, #14
 80025ba:	5f49      	ldrsh	r1, [r1, r5]
 80025bc:	f000 f9d6 	bl	800296c <_lseek_r>
 80025c0:	89a3      	ldrh	r3, [r4, #12]
 80025c2:	1c42      	adds	r2, r0, #1
 80025c4:	d103      	bne.n	80025ce <__sseek+0x1a>
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <__sseek+0x28>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	81a3      	strh	r3, [r4, #12]
 80025cc:	bd70      	pop	{r4, r5, r6, pc}
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	0152      	lsls	r2, r2, #5
 80025d2:	4313      	orrs	r3, r2
 80025d4:	81a3      	strh	r3, [r4, #12]
 80025d6:	6560      	str	r0, [r4, #84]	; 0x54
 80025d8:	e7f8      	b.n	80025cc <__sseek+0x18>
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	ffffefff 	.word	0xffffefff

080025e0 <__sclose>:
 80025e0:	b510      	push	{r4, lr}
 80025e2:	230e      	movs	r3, #14
 80025e4:	5ec9      	ldrsh	r1, [r1, r3]
 80025e6:	f000 f8e3 	bl	80027b0 <_close_r>
 80025ea:	bd10      	pop	{r4, pc}

080025ec <__swbuf_r>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	0005      	movs	r5, r0
 80025f0:	000e      	movs	r6, r1
 80025f2:	0014      	movs	r4, r2
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d004      	beq.n	8002602 <__swbuf_r+0x16>
 80025f8:	6983      	ldr	r3, [r0, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <__swbuf_r+0x16>
 80025fe:	f7ff fe4b 	bl	8002298 <__sinit>
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <__swbuf_r+0xa0>)
 8002604:	429c      	cmp	r4, r3
 8002606:	d12e      	bne.n	8002666 <__swbuf_r+0x7a>
 8002608:	686c      	ldr	r4, [r5, #4]
 800260a:	69a3      	ldr	r3, [r4, #24]
 800260c:	60a3      	str	r3, [r4, #8]
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	071b      	lsls	r3, r3, #28
 8002612:	d532      	bpl.n	800267a <__swbuf_r+0x8e>
 8002614:	6923      	ldr	r3, [r4, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d02f      	beq.n	800267a <__swbuf_r+0x8e>
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	6922      	ldr	r2, [r4, #16]
 800261e:	b2f7      	uxtb	r7, r6
 8002620:	1a98      	subs	r0, r3, r2
 8002622:	6963      	ldr	r3, [r4, #20]
 8002624:	b2f6      	uxtb	r6, r6
 8002626:	4283      	cmp	r3, r0
 8002628:	dc05      	bgt.n	8002636 <__swbuf_r+0x4a>
 800262a:	0021      	movs	r1, r4
 800262c:	0028      	movs	r0, r5
 800262e:	f000 f95d 	bl	80028ec <_fflush_r>
 8002632:	2800      	cmp	r0, #0
 8002634:	d127      	bne.n	8002686 <__swbuf_r+0x9a>
 8002636:	68a3      	ldr	r3, [r4, #8]
 8002638:	3001      	adds	r0, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	60a3      	str	r3, [r4, #8]
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	6022      	str	r2, [r4, #0]
 8002644:	701f      	strb	r7, [r3, #0]
 8002646:	6963      	ldr	r3, [r4, #20]
 8002648:	4283      	cmp	r3, r0
 800264a:	d004      	beq.n	8002656 <__swbuf_r+0x6a>
 800264c:	89a3      	ldrh	r3, [r4, #12]
 800264e:	07db      	lsls	r3, r3, #31
 8002650:	d507      	bpl.n	8002662 <__swbuf_r+0x76>
 8002652:	2e0a      	cmp	r6, #10
 8002654:	d105      	bne.n	8002662 <__swbuf_r+0x76>
 8002656:	0021      	movs	r1, r4
 8002658:	0028      	movs	r0, r5
 800265a:	f000 f947 	bl	80028ec <_fflush_r>
 800265e:	2800      	cmp	r0, #0
 8002660:	d111      	bne.n	8002686 <__swbuf_r+0x9a>
 8002662:	0030      	movs	r0, r6
 8002664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <__swbuf_r+0xa4>)
 8002668:	429c      	cmp	r4, r3
 800266a:	d101      	bne.n	8002670 <__swbuf_r+0x84>
 800266c:	68ac      	ldr	r4, [r5, #8]
 800266e:	e7cc      	b.n	800260a <__swbuf_r+0x1e>
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <__swbuf_r+0xa8>)
 8002672:	429c      	cmp	r4, r3
 8002674:	d1c9      	bne.n	800260a <__swbuf_r+0x1e>
 8002676:	68ec      	ldr	r4, [r5, #12]
 8002678:	e7c7      	b.n	800260a <__swbuf_r+0x1e>
 800267a:	0021      	movs	r1, r4
 800267c:	0028      	movs	r0, r5
 800267e:	f000 f81f 	bl	80026c0 <__swsetup_r>
 8002682:	2800      	cmp	r0, #0
 8002684:	d0c9      	beq.n	800261a <__swbuf_r+0x2e>
 8002686:	2601      	movs	r6, #1
 8002688:	4276      	negs	r6, r6
 800268a:	e7ea      	b.n	8002662 <__swbuf_r+0x76>
 800268c:	08002c44 	.word	0x08002c44
 8002690:	08002c64 	.word	0x08002c64
 8002694:	08002c24 	.word	0x08002c24

08002698 <_write_r>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	0004      	movs	r4, r0
 800269c:	0008      	movs	r0, r1
 800269e:	0011      	movs	r1, r2
 80026a0:	001a      	movs	r2, r3
 80026a2:	2300      	movs	r3, #0
 80026a4:	4d05      	ldr	r5, [pc, #20]	; (80026bc <_write_r+0x24>)
 80026a6:	602b      	str	r3, [r5, #0]
 80026a8:	f7fe f81c 	bl	80006e4 <_write>
 80026ac:	1c43      	adds	r3, r0, #1
 80026ae:	d103      	bne.n	80026b8 <_write_r+0x20>
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d000      	beq.n	80026b8 <_write_r+0x20>
 80026b6:	6023      	str	r3, [r4, #0]
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	20000138 	.word	0x20000138

080026c0 <__swsetup_r>:
 80026c0:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <__swsetup_r+0xe0>)
 80026c2:	b570      	push	{r4, r5, r6, lr}
 80026c4:	681d      	ldr	r5, [r3, #0]
 80026c6:	0006      	movs	r6, r0
 80026c8:	000c      	movs	r4, r1
 80026ca:	2d00      	cmp	r5, #0
 80026cc:	d005      	beq.n	80026da <__swsetup_r+0x1a>
 80026ce:	69ab      	ldr	r3, [r5, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <__swsetup_r+0x1a>
 80026d4:	0028      	movs	r0, r5
 80026d6:	f7ff fddf 	bl	8002298 <__sinit>
 80026da:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <__swsetup_r+0xe4>)
 80026dc:	429c      	cmp	r4, r3
 80026de:	d10f      	bne.n	8002700 <__swsetup_r+0x40>
 80026e0:	686c      	ldr	r4, [r5, #4]
 80026e2:	230c      	movs	r3, #12
 80026e4:	5ee2      	ldrsh	r2, [r4, r3]
 80026e6:	b293      	uxth	r3, r2
 80026e8:	0711      	lsls	r1, r2, #28
 80026ea:	d42d      	bmi.n	8002748 <__swsetup_r+0x88>
 80026ec:	06d9      	lsls	r1, r3, #27
 80026ee:	d411      	bmi.n	8002714 <__swsetup_r+0x54>
 80026f0:	2309      	movs	r3, #9
 80026f2:	2001      	movs	r0, #1
 80026f4:	6033      	str	r3, [r6, #0]
 80026f6:	3337      	adds	r3, #55	; 0x37
 80026f8:	4313      	orrs	r3, r2
 80026fa:	81a3      	strh	r3, [r4, #12]
 80026fc:	4240      	negs	r0, r0
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <__swsetup_r+0xe8>)
 8002702:	429c      	cmp	r4, r3
 8002704:	d101      	bne.n	800270a <__swsetup_r+0x4a>
 8002706:	68ac      	ldr	r4, [r5, #8]
 8002708:	e7eb      	b.n	80026e2 <__swsetup_r+0x22>
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <__swsetup_r+0xec>)
 800270c:	429c      	cmp	r4, r3
 800270e:	d1e8      	bne.n	80026e2 <__swsetup_r+0x22>
 8002710:	68ec      	ldr	r4, [r5, #12]
 8002712:	e7e6      	b.n	80026e2 <__swsetup_r+0x22>
 8002714:	075b      	lsls	r3, r3, #29
 8002716:	d513      	bpl.n	8002740 <__swsetup_r+0x80>
 8002718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800271a:	2900      	cmp	r1, #0
 800271c:	d008      	beq.n	8002730 <__swsetup_r+0x70>
 800271e:	0023      	movs	r3, r4
 8002720:	3344      	adds	r3, #68	; 0x44
 8002722:	4299      	cmp	r1, r3
 8002724:	d002      	beq.n	800272c <__swsetup_r+0x6c>
 8002726:	0030      	movs	r0, r6
 8002728:	f000 f9b0 	bl	8002a8c <_free_r>
 800272c:	2300      	movs	r3, #0
 800272e:	6363      	str	r3, [r4, #52]	; 0x34
 8002730:	2224      	movs	r2, #36	; 0x24
 8002732:	89a3      	ldrh	r3, [r4, #12]
 8002734:	4393      	bics	r3, r2
 8002736:	81a3      	strh	r3, [r4, #12]
 8002738:	2300      	movs	r3, #0
 800273a:	6063      	str	r3, [r4, #4]
 800273c:	6923      	ldr	r3, [r4, #16]
 800273e:	6023      	str	r3, [r4, #0]
 8002740:	2308      	movs	r3, #8
 8002742:	89a2      	ldrh	r2, [r4, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	81a3      	strh	r3, [r4, #12]
 8002748:	6923      	ldr	r3, [r4, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <__swsetup_r+0xa6>
 800274e:	21a0      	movs	r1, #160	; 0xa0
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	0089      	lsls	r1, r1, #2
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	400b      	ands	r3, r1
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <__swsetup_r+0xa6>
 800275e:	0021      	movs	r1, r4
 8002760:	0030      	movs	r0, r6
 8002762:	f000 f93f 	bl	80029e4 <__smakebuf_r>
 8002766:	220c      	movs	r2, #12
 8002768:	5ea3      	ldrsh	r3, [r4, r2]
 800276a:	2001      	movs	r0, #1
 800276c:	001a      	movs	r2, r3
 800276e:	b299      	uxth	r1, r3
 8002770:	4002      	ands	r2, r0
 8002772:	4203      	tst	r3, r0
 8002774:	d00f      	beq.n	8002796 <__swsetup_r+0xd6>
 8002776:	2200      	movs	r2, #0
 8002778:	60a2      	str	r2, [r4, #8]
 800277a:	6962      	ldr	r2, [r4, #20]
 800277c:	4252      	negs	r2, r2
 800277e:	61a2      	str	r2, [r4, #24]
 8002780:	2000      	movs	r0, #0
 8002782:	6922      	ldr	r2, [r4, #16]
 8002784:	4282      	cmp	r2, r0
 8002786:	d1ba      	bne.n	80026fe <__swsetup_r+0x3e>
 8002788:	060a      	lsls	r2, r1, #24
 800278a:	d5b8      	bpl.n	80026fe <__swsetup_r+0x3e>
 800278c:	2240      	movs	r2, #64	; 0x40
 800278e:	4313      	orrs	r3, r2
 8002790:	81a3      	strh	r3, [r4, #12]
 8002792:	3801      	subs	r0, #1
 8002794:	e7b3      	b.n	80026fe <__swsetup_r+0x3e>
 8002796:	0788      	lsls	r0, r1, #30
 8002798:	d400      	bmi.n	800279c <__swsetup_r+0xdc>
 800279a:	6962      	ldr	r2, [r4, #20]
 800279c:	60a2      	str	r2, [r4, #8]
 800279e:	e7ef      	b.n	8002780 <__swsetup_r+0xc0>
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	08002c44 	.word	0x08002c44
 80027a8:	08002c64 	.word	0x08002c64
 80027ac:	08002c24 	.word	0x08002c24

080027b0 <_close_r>:
 80027b0:	2300      	movs	r3, #0
 80027b2:	b570      	push	{r4, r5, r6, lr}
 80027b4:	4d06      	ldr	r5, [pc, #24]	; (80027d0 <_close_r+0x20>)
 80027b6:	0004      	movs	r4, r0
 80027b8:	0008      	movs	r0, r1
 80027ba:	602b      	str	r3, [r5, #0]
 80027bc:	f7fd ffae 	bl	800071c <_close>
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	d103      	bne.n	80027cc <_close_r+0x1c>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d000      	beq.n	80027cc <_close_r+0x1c>
 80027ca:	6023      	str	r3, [r4, #0]
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	20000138 	.word	0x20000138

080027d4 <__sflush_r>:
 80027d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027d6:	898b      	ldrh	r3, [r1, #12]
 80027d8:	0005      	movs	r5, r0
 80027da:	000c      	movs	r4, r1
 80027dc:	071a      	lsls	r2, r3, #28
 80027de:	d45f      	bmi.n	80028a0 <__sflush_r+0xcc>
 80027e0:	684a      	ldr	r2, [r1, #4]
 80027e2:	2a00      	cmp	r2, #0
 80027e4:	dc04      	bgt.n	80027f0 <__sflush_r+0x1c>
 80027e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	dc01      	bgt.n	80027f0 <__sflush_r+0x1c>
 80027ec:	2000      	movs	r0, #0
 80027ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80027f2:	2f00      	cmp	r7, #0
 80027f4:	d0fa      	beq.n	80027ec <__sflush_r+0x18>
 80027f6:	2200      	movs	r2, #0
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	682e      	ldr	r6, [r5, #0]
 80027fc:	602a      	str	r2, [r5, #0]
 80027fe:	001a      	movs	r2, r3
 8002800:	0149      	lsls	r1, r1, #5
 8002802:	400a      	ands	r2, r1
 8002804:	420b      	tst	r3, r1
 8002806:	d034      	beq.n	8002872 <__sflush_r+0x9e>
 8002808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800280a:	89a3      	ldrh	r3, [r4, #12]
 800280c:	075b      	lsls	r3, r3, #29
 800280e:	d506      	bpl.n	800281e <__sflush_r+0x4a>
 8002810:	6863      	ldr	r3, [r4, #4]
 8002812:	1ac0      	subs	r0, r0, r3
 8002814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <__sflush_r+0x4a>
 800281a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800281c:	1ac0      	subs	r0, r0, r3
 800281e:	0002      	movs	r2, r0
 8002820:	6a21      	ldr	r1, [r4, #32]
 8002822:	2300      	movs	r3, #0
 8002824:	0028      	movs	r0, r5
 8002826:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002828:	47b8      	blx	r7
 800282a:	89a1      	ldrh	r1, [r4, #12]
 800282c:	1c43      	adds	r3, r0, #1
 800282e:	d106      	bne.n	800283e <__sflush_r+0x6a>
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	2b1d      	cmp	r3, #29
 8002834:	d831      	bhi.n	800289a <__sflush_r+0xc6>
 8002836:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <__sflush_r+0x114>)
 8002838:	40da      	lsrs	r2, r3
 800283a:	07d3      	lsls	r3, r2, #31
 800283c:	d52d      	bpl.n	800289a <__sflush_r+0xc6>
 800283e:	2300      	movs	r3, #0
 8002840:	6063      	str	r3, [r4, #4]
 8002842:	6923      	ldr	r3, [r4, #16]
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	04cb      	lsls	r3, r1, #19
 8002848:	d505      	bpl.n	8002856 <__sflush_r+0x82>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	d102      	bne.n	8002854 <__sflush_r+0x80>
 800284e:	682b      	ldr	r3, [r5, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d100      	bne.n	8002856 <__sflush_r+0x82>
 8002854:	6560      	str	r0, [r4, #84]	; 0x54
 8002856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002858:	602e      	str	r6, [r5, #0]
 800285a:	2900      	cmp	r1, #0
 800285c:	d0c6      	beq.n	80027ec <__sflush_r+0x18>
 800285e:	0023      	movs	r3, r4
 8002860:	3344      	adds	r3, #68	; 0x44
 8002862:	4299      	cmp	r1, r3
 8002864:	d002      	beq.n	800286c <__sflush_r+0x98>
 8002866:	0028      	movs	r0, r5
 8002868:	f000 f910 	bl	8002a8c <_free_r>
 800286c:	2000      	movs	r0, #0
 800286e:	6360      	str	r0, [r4, #52]	; 0x34
 8002870:	e7bd      	b.n	80027ee <__sflush_r+0x1a>
 8002872:	2301      	movs	r3, #1
 8002874:	0028      	movs	r0, r5
 8002876:	6a21      	ldr	r1, [r4, #32]
 8002878:	47b8      	blx	r7
 800287a:	1c43      	adds	r3, r0, #1
 800287c:	d1c5      	bne.n	800280a <__sflush_r+0x36>
 800287e:	682b      	ldr	r3, [r5, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0c2      	beq.n	800280a <__sflush_r+0x36>
 8002884:	2b1d      	cmp	r3, #29
 8002886:	d001      	beq.n	800288c <__sflush_r+0xb8>
 8002888:	2b16      	cmp	r3, #22
 800288a:	d101      	bne.n	8002890 <__sflush_r+0xbc>
 800288c:	602e      	str	r6, [r5, #0]
 800288e:	e7ad      	b.n	80027ec <__sflush_r+0x18>
 8002890:	2340      	movs	r3, #64	; 0x40
 8002892:	89a2      	ldrh	r2, [r4, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	81a3      	strh	r3, [r4, #12]
 8002898:	e7a9      	b.n	80027ee <__sflush_r+0x1a>
 800289a:	2340      	movs	r3, #64	; 0x40
 800289c:	430b      	orrs	r3, r1
 800289e:	e7fa      	b.n	8002896 <__sflush_r+0xc2>
 80028a0:	690f      	ldr	r7, [r1, #16]
 80028a2:	2f00      	cmp	r7, #0
 80028a4:	d0a2      	beq.n	80027ec <__sflush_r+0x18>
 80028a6:	680a      	ldr	r2, [r1, #0]
 80028a8:	600f      	str	r7, [r1, #0]
 80028aa:	1bd2      	subs	r2, r2, r7
 80028ac:	9201      	str	r2, [sp, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	079b      	lsls	r3, r3, #30
 80028b2:	d100      	bne.n	80028b6 <__sflush_r+0xe2>
 80028b4:	694a      	ldr	r2, [r1, #20]
 80028b6:	60a2      	str	r2, [r4, #8]
 80028b8:	9b01      	ldr	r3, [sp, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	dc00      	bgt.n	80028c0 <__sflush_r+0xec>
 80028be:	e795      	b.n	80027ec <__sflush_r+0x18>
 80028c0:	003a      	movs	r2, r7
 80028c2:	0028      	movs	r0, r5
 80028c4:	9b01      	ldr	r3, [sp, #4]
 80028c6:	6a21      	ldr	r1, [r4, #32]
 80028c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028ca:	47b0      	blx	r6
 80028cc:	2800      	cmp	r0, #0
 80028ce:	dc06      	bgt.n	80028de <__sflush_r+0x10a>
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	2001      	movs	r0, #1
 80028d4:	89a2      	ldrh	r2, [r4, #12]
 80028d6:	4240      	negs	r0, r0
 80028d8:	4313      	orrs	r3, r2
 80028da:	81a3      	strh	r3, [r4, #12]
 80028dc:	e787      	b.n	80027ee <__sflush_r+0x1a>
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	183f      	adds	r7, r7, r0
 80028e2:	1a1b      	subs	r3, r3, r0
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	e7e7      	b.n	80028b8 <__sflush_r+0xe4>
 80028e8:	20400001 	.word	0x20400001

080028ec <_fflush_r>:
 80028ec:	690b      	ldr	r3, [r1, #16]
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	0005      	movs	r5, r0
 80028f2:	000c      	movs	r4, r1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_fflush_r+0x12>
 80028f8:	2500      	movs	r5, #0
 80028fa:	0028      	movs	r0, r5
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
 80028fe:	2800      	cmp	r0, #0
 8002900:	d004      	beq.n	800290c <_fflush_r+0x20>
 8002902:	6983      	ldr	r3, [r0, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <_fflush_r+0x20>
 8002908:	f7ff fcc6 	bl	8002298 <__sinit>
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <_fflush_r+0x74>)
 800290e:	429c      	cmp	r4, r3
 8002910:	d11b      	bne.n	800294a <_fflush_r+0x5e>
 8002912:	686c      	ldr	r4, [r5, #4]
 8002914:	220c      	movs	r2, #12
 8002916:	5ea3      	ldrsh	r3, [r4, r2]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ed      	beq.n	80028f8 <_fflush_r+0xc>
 800291c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800291e:	07d2      	lsls	r2, r2, #31
 8002920:	d404      	bmi.n	800292c <_fflush_r+0x40>
 8002922:	059b      	lsls	r3, r3, #22
 8002924:	d402      	bmi.n	800292c <_fflush_r+0x40>
 8002926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002928:	f7ff fd57 	bl	80023da <__retarget_lock_acquire_recursive>
 800292c:	0028      	movs	r0, r5
 800292e:	0021      	movs	r1, r4
 8002930:	f7ff ff50 	bl	80027d4 <__sflush_r>
 8002934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002936:	0005      	movs	r5, r0
 8002938:	07db      	lsls	r3, r3, #31
 800293a:	d4de      	bmi.n	80028fa <_fflush_r+0xe>
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	059b      	lsls	r3, r3, #22
 8002940:	d4db      	bmi.n	80028fa <_fflush_r+0xe>
 8002942:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002944:	f7ff fd4a 	bl	80023dc <__retarget_lock_release_recursive>
 8002948:	e7d7      	b.n	80028fa <_fflush_r+0xe>
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <_fflush_r+0x78>)
 800294c:	429c      	cmp	r4, r3
 800294e:	d101      	bne.n	8002954 <_fflush_r+0x68>
 8002950:	68ac      	ldr	r4, [r5, #8]
 8002952:	e7df      	b.n	8002914 <_fflush_r+0x28>
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <_fflush_r+0x7c>)
 8002956:	429c      	cmp	r4, r3
 8002958:	d1dc      	bne.n	8002914 <_fflush_r+0x28>
 800295a:	68ec      	ldr	r4, [r5, #12]
 800295c:	e7da      	b.n	8002914 <_fflush_r+0x28>
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	08002c44 	.word	0x08002c44
 8002964:	08002c64 	.word	0x08002c64
 8002968:	08002c24 	.word	0x08002c24

0800296c <_lseek_r>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	0004      	movs	r4, r0
 8002970:	0008      	movs	r0, r1
 8002972:	0011      	movs	r1, r2
 8002974:	001a      	movs	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	4d05      	ldr	r5, [pc, #20]	; (8002990 <_lseek_r+0x24>)
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	f7fd feef 	bl	800075e <_lseek>
 8002980:	1c43      	adds	r3, r0, #1
 8002982:	d103      	bne.n	800298c <_lseek_r+0x20>
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d000      	beq.n	800298c <_lseek_r+0x20>
 800298a:	6023      	str	r3, [r4, #0]
 800298c:	bd70      	pop	{r4, r5, r6, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	20000138 	.word	0x20000138

08002994 <__swhatbuf_r>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	000e      	movs	r6, r1
 8002998:	001d      	movs	r5, r3
 800299a:	230e      	movs	r3, #14
 800299c:	5ec9      	ldrsh	r1, [r1, r3]
 800299e:	0014      	movs	r4, r2
 80029a0:	b096      	sub	sp, #88	; 0x58
 80029a2:	2900      	cmp	r1, #0
 80029a4:	da07      	bge.n	80029b6 <__swhatbuf_r+0x22>
 80029a6:	2300      	movs	r3, #0
 80029a8:	602b      	str	r3, [r5, #0]
 80029aa:	89b3      	ldrh	r3, [r6, #12]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	d411      	bmi.n	80029d4 <__swhatbuf_r+0x40>
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	e00f      	b.n	80029d6 <__swhatbuf_r+0x42>
 80029b6:	466a      	mov	r2, sp
 80029b8:	f000 f8c6 	bl	8002b48 <_fstat_r>
 80029bc:	2800      	cmp	r0, #0
 80029be:	dbf2      	blt.n	80029a6 <__swhatbuf_r+0x12>
 80029c0:	23f0      	movs	r3, #240	; 0xf0
 80029c2:	9901      	ldr	r1, [sp, #4]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	4019      	ands	r1, r3
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <__swhatbuf_r+0x4c>)
 80029ca:	18c9      	adds	r1, r1, r3
 80029cc:	424b      	negs	r3, r1
 80029ce:	4159      	adcs	r1, r3
 80029d0:	6029      	str	r1, [r5, #0]
 80029d2:	e7ed      	b.n	80029b0 <__swhatbuf_r+0x1c>
 80029d4:	2340      	movs	r3, #64	; 0x40
 80029d6:	2000      	movs	r0, #0
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	b016      	add	sp, #88	; 0x58
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	ffffe000 	.word	0xffffe000

080029e4 <__smakebuf_r>:
 80029e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029e6:	2602      	movs	r6, #2
 80029e8:	898b      	ldrh	r3, [r1, #12]
 80029ea:	0005      	movs	r5, r0
 80029ec:	000c      	movs	r4, r1
 80029ee:	4233      	tst	r3, r6
 80029f0:	d006      	beq.n	8002a00 <__smakebuf_r+0x1c>
 80029f2:	0023      	movs	r3, r4
 80029f4:	3347      	adds	r3, #71	; 0x47
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	6123      	str	r3, [r4, #16]
 80029fa:	2301      	movs	r3, #1
 80029fc:	6163      	str	r3, [r4, #20]
 80029fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002a00:	466a      	mov	r2, sp
 8002a02:	ab01      	add	r3, sp, #4
 8002a04:	f7ff ffc6 	bl	8002994 <__swhatbuf_r>
 8002a08:	9900      	ldr	r1, [sp, #0]
 8002a0a:	0007      	movs	r7, r0
 8002a0c:	0028      	movs	r0, r5
 8002a0e:	f7ff fce7 	bl	80023e0 <_malloc_r>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d108      	bne.n	8002a28 <__smakebuf_r+0x44>
 8002a16:	220c      	movs	r2, #12
 8002a18:	5ea3      	ldrsh	r3, [r4, r2]
 8002a1a:	059a      	lsls	r2, r3, #22
 8002a1c:	d4ef      	bmi.n	80029fe <__smakebuf_r+0x1a>
 8002a1e:	2203      	movs	r2, #3
 8002a20:	4393      	bics	r3, r2
 8002a22:	431e      	orrs	r6, r3
 8002a24:	81a6      	strh	r6, [r4, #12]
 8002a26:	e7e4      	b.n	80029f2 <__smakebuf_r+0xe>
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <__smakebuf_r+0x84>)
 8002a2a:	62ab      	str	r3, [r5, #40]	; 0x28
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	89a2      	ldrh	r2, [r4, #12]
 8002a30:	6020      	str	r0, [r4, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	9b00      	ldr	r3, [sp, #0]
 8002a38:	6120      	str	r0, [r4, #16]
 8002a3a:	6163      	str	r3, [r4, #20]
 8002a3c:	9b01      	ldr	r3, [sp, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <__smakebuf_r+0x7a>
 8002a42:	0028      	movs	r0, r5
 8002a44:	230e      	movs	r3, #14
 8002a46:	5ee1      	ldrsh	r1, [r4, r3]
 8002a48:	f000 f890 	bl	8002b6c <_isatty_r>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d006      	beq.n	8002a5e <__smakebuf_r+0x7a>
 8002a50:	2203      	movs	r2, #3
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	4393      	bics	r3, r2
 8002a56:	001a      	movs	r2, r3
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	81a3      	strh	r3, [r4, #12]
 8002a5e:	89a0      	ldrh	r0, [r4, #12]
 8002a60:	4307      	orrs	r7, r0
 8002a62:	81a7      	strh	r7, [r4, #12]
 8002a64:	e7cb      	b.n	80029fe <__smakebuf_r+0x1a>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	0800221d 	.word	0x0800221d

08002a6c <__malloc_lock>:
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	4802      	ldr	r0, [pc, #8]	; (8002a78 <__malloc_lock+0xc>)
 8002a70:	f7ff fcb3 	bl	80023da <__retarget_lock_acquire_recursive>
 8002a74:	bd10      	pop	{r4, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	20000130 	.word	0x20000130

08002a7c <__malloc_unlock>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	4802      	ldr	r0, [pc, #8]	; (8002a88 <__malloc_unlock+0xc>)
 8002a80:	f7ff fcac 	bl	80023dc <__retarget_lock_release_recursive>
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000130 	.word	0x20000130

08002a8c <_free_r>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	0005      	movs	r5, r0
 8002a90:	2900      	cmp	r1, #0
 8002a92:	d010      	beq.n	8002ab6 <_free_r+0x2a>
 8002a94:	1f0c      	subs	r4, r1, #4
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	da00      	bge.n	8002a9e <_free_r+0x12>
 8002a9c:	18e4      	adds	r4, r4, r3
 8002a9e:	0028      	movs	r0, r5
 8002aa0:	f7ff ffe4 	bl	8002a6c <__malloc_lock>
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <_free_r+0x90>)
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <_free_r+0x2c>
 8002aac:	6063      	str	r3, [r4, #4]
 8002aae:	6014      	str	r4, [r2, #0]
 8002ab0:	0028      	movs	r0, r5
 8002ab2:	f7ff ffe3 	bl	8002a7c <__malloc_unlock>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	42a3      	cmp	r3, r4
 8002aba:	d908      	bls.n	8002ace <_free_r+0x42>
 8002abc:	6821      	ldr	r1, [r4, #0]
 8002abe:	1860      	adds	r0, r4, r1
 8002ac0:	4283      	cmp	r3, r0
 8002ac2:	d1f3      	bne.n	8002aac <_free_r+0x20>
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	1841      	adds	r1, r0, r1
 8002aca:	6021      	str	r1, [r4, #0]
 8002acc:	e7ee      	b.n	8002aac <_free_r+0x20>
 8002ace:	001a      	movs	r2, r3
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <_free_r+0x4e>
 8002ad6:	42a3      	cmp	r3, r4
 8002ad8:	d9f9      	bls.n	8002ace <_free_r+0x42>
 8002ada:	6811      	ldr	r1, [r2, #0]
 8002adc:	1850      	adds	r0, r2, r1
 8002ade:	42a0      	cmp	r0, r4
 8002ae0:	d10b      	bne.n	8002afa <_free_r+0x6e>
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	1809      	adds	r1, r1, r0
 8002ae6:	1850      	adds	r0, r2, r1
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	4283      	cmp	r3, r0
 8002aec:	d1e0      	bne.n	8002ab0 <_free_r+0x24>
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	1841      	adds	r1, r0, r1
 8002af4:	6011      	str	r1, [r2, #0]
 8002af6:	6053      	str	r3, [r2, #4]
 8002af8:	e7da      	b.n	8002ab0 <_free_r+0x24>
 8002afa:	42a0      	cmp	r0, r4
 8002afc:	d902      	bls.n	8002b04 <_free_r+0x78>
 8002afe:	230c      	movs	r3, #12
 8002b00:	602b      	str	r3, [r5, #0]
 8002b02:	e7d5      	b.n	8002ab0 <_free_r+0x24>
 8002b04:	6821      	ldr	r1, [r4, #0]
 8002b06:	1860      	adds	r0, r4, r1
 8002b08:	4283      	cmp	r3, r0
 8002b0a:	d103      	bne.n	8002b14 <_free_r+0x88>
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	1841      	adds	r1, r0, r1
 8002b12:	6021      	str	r1, [r4, #0]
 8002b14:	6063      	str	r3, [r4, #4]
 8002b16:	6054      	str	r4, [r2, #4]
 8002b18:	e7ca      	b.n	8002ab0 <_free_r+0x24>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	20000090 	.word	0x20000090

08002b20 <_read_r>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	0004      	movs	r4, r0
 8002b24:	0008      	movs	r0, r1
 8002b26:	0011      	movs	r1, r2
 8002b28:	001a      	movs	r2, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4d05      	ldr	r5, [pc, #20]	; (8002b44 <_read_r+0x24>)
 8002b2e:	602b      	str	r3, [r5, #0]
 8002b30:	f7fd fdbb 	bl	80006aa <_read>
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	d103      	bne.n	8002b40 <_read_r+0x20>
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d000      	beq.n	8002b40 <_read_r+0x20>
 8002b3e:	6023      	str	r3, [r4, #0]
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	20000138 	.word	0x20000138

08002b48 <_fstat_r>:
 8002b48:	2300      	movs	r3, #0
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	4d06      	ldr	r5, [pc, #24]	; (8002b68 <_fstat_r+0x20>)
 8002b4e:	0004      	movs	r4, r0
 8002b50:	0008      	movs	r0, r1
 8002b52:	0011      	movs	r1, r2
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	f7fd fdeb 	bl	8000730 <_fstat>
 8002b5a:	1c43      	adds	r3, r0, #1
 8002b5c:	d103      	bne.n	8002b66 <_fstat_r+0x1e>
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d000      	beq.n	8002b66 <_fstat_r+0x1e>
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
 8002b68:	20000138 	.word	0x20000138

08002b6c <_isatty_r>:
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	b570      	push	{r4, r5, r6, lr}
 8002b70:	4d06      	ldr	r5, [pc, #24]	; (8002b8c <_isatty_r+0x20>)
 8002b72:	0004      	movs	r4, r0
 8002b74:	0008      	movs	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fd fde8 	bl	800074c <_isatty>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d103      	bne.n	8002b88 <_isatty_r+0x1c>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d000      	beq.n	8002b88 <_isatty_r+0x1c>
 8002b86:	6023      	str	r3, [r4, #0]
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	20000138 	.word	0x20000138

08002b90 <_init>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr

08002b9c <_fini>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr
